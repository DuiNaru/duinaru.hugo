<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>programming on DuiNaru | 개발과 경험을 담는 블로그</title><link>https://duinaru.github.io/categories/programming/</link><description>Recent content in programming on DuiNaru | 개발과 경험을 담는 블로그</description><generator>Hugo -- gohugo.io</generator><language>ko</language><lastBuildDate>Sat, 16 Nov 2019 11:42:23 +0000</lastBuildDate><atom:link href="https://duinaru.github.io/categories/programming/index.xml" rel="self" type="application/rss+xml"/><item><title>Rails 화면 띄우기 및 Cloud9 사용</title><link>https://duinaru.github.io/posts/2019-11-16-develop-using-cloud9/</link><pubDate>Sat, 16 Nov 2019 11:42:23 +0000</pubDate><guid>https://duinaru.github.io/posts/2019-11-16-develop-using-cloud9/</guid><description>샘플 화면 하나를 띄우고, 본격적인 개발에 앞서 IDE를 사용하기로 하였습니다.
blog 생성 blog라는 이름의 rails 어플을 생성하였습니다.
rails new blog 해당 명령어로 미리 설정되어 있는 blog 어플리케이션을 가져와서 다운로드한다네요.
에러 발생 설치는 되었는데, 중간에 에러가 나왔네요. 역시 한번에 되는건 없나봅니다.
Gem::Ext::BuildError: ERROR: Failed to build gem native extension. current directory: /tmp/bundler20191116-12860-iie6sqlite3-1.4.1/gems/sqlite3-1.4.1/ext/sqlite3 /usr/bin/ruby2.5 -r ./siteconf20191116-12860-3nvvhf.rb extconf.rb checking for sqlite3.h... no sqlite3.h is missing. Try 'brew install sqlite3', 'yum install sqlite-devel' or 'apt-get install libsqlite3-dev' and check your shared library search path (the location where your sqlite3 shared library is located).</description></item><item><title>ruby on rails를 ec2에 구축해보았습니다</title><link>https://duinaru.github.io/posts/2019-11-14-set-up-ruby-on-rails-ec2/</link><pubDate>Thu, 14 Nov 2019 11:29:08 +0000</pubDate><guid>https://duinaru.github.io/posts/2019-11-14-set-up-ruby-on-rails-ec2/</guid><description>ruby를 알게 되었으니 ruby를 이용한 웹 사이트 한번 만들어보고싶어서 ruby on rails로 개발을 시작하였습니다.
개발을 하면서 동시에 ruby on rails를 익히려는 목적이므로 기본적인 환경 구축부터 시작하였습니다.
EC2 생성 AMI
편하게 ubuntu(Ubuntu Server 18.04 LTS (HVM), SSD Volume Type)를 선택하였습니다.
나머지 설정은 free-tier 가능한 설정으로 생성했습니다.
Security groups
SSH 접속 가능하게 22포트는 열어두고, 나머지는 나중에 설정하면서 열어주었습니다.
클릭 몇 번에 생성이 끝났습니다. 고마워요. AWS
설치 SSH로 접속해서, 차근차근 설치를 진행합니다.
Ruby on Rails 의 Getting Started with Rails 를 바탕으로 진행하였습니다.</description></item><item><title>Blog에 댓글 기능을 추가하였습니다</title><link>https://duinaru.github.io/posts/2019-11-03-experience-using-comments-with-minimal-mistakes/</link><pubDate>Sun, 03 Nov 2019 11:12:30 +0000</pubDate><guid>https://duinaru.github.io/posts/2019-11-03-experience-using-comments-with-minimal-mistakes/</guid><description>사용하고 있는 Minimal Mistakes 테마는 여러 댓글 서비스를 사용할 수 있게 설정 할 수 있어서, 사용해보았습니다.
댓글을 사용할 페이지에 comment: true를 추가하고, _config.xml에 사용할 서비스와 정보를 입력하기만 하면 됩니다.
이번에는 disqus라는 댓글 서비스를 사용해 보았습니다.
disqus에 가입한 뒤에 사이트를 생성해주고, ShortName을 알면 됩니다.
shortname은 사이트를 생성할 때, 또는 생성하고 설정 화면에서도 알 수 있습니다.
site생성
site설정
그런다음에, _config.xml 에 설정하면 됩니다.
가입하고 테마에 사용 설정만 하면 되니 간단하네요.</description></item><item><title>GitHub Pages에서 지원하지 않는 플러그인 쓰기</title><link>https://duinaru.github.io/posts/2019-10-26-how-to-make-a-github-pages-work-with-an-unsupported-plugin/</link><pubDate>Sat, 26 Oct 2019 10:58:53 +0000</pubDate><guid>https://duinaru.github.io/posts/2019-10-26-how-to-make-a-github-pages-work-with-an-unsupported-plugin/</guid><description>jekyll을 공식적으로 지원하는 GitHub Pages이지만, 모든 jekyll의 플러그인까지 지원하는 것은 아닙니다.
GitHub Pages는 지원하는 플러그인이 제한 되어있습니다.
이 이외의 플러그인은 GitHub Pages에서 jekyll을 build할때, 제한되어 적용되지 않습니다.
그럼, GitHub Pages에서 jekyll로 웹 페이지 서비스를 만들 때는 일부 플러그인만 사용해야 하는 것 일까요?
반은 맞고 반은 틀립니다.
알아보기 전에, 먼저 어떻게 GitHub Pages가 jekyll를 쓰는지 살펴봅시다.
GitHub Pages with jekyll source
GitHub Pages에서 jekyll을 쓰는 간단한 방법입니다.
공식 도움말에서도 설명하는 방법처럼 jekyll 소스를 repository에 올려두고 GitHub Pages가 jekyll을 build를 하는 방법입니다.</description></item><item><title>개발과 경험이 함께 하는 블로그</title><link>https://duinaru.github.io/posts/2019-10-23-blog-with-development-and-experience/</link><pubDate>Wed, 23 Oct 2019 10:34:49 +0000</pubDate><guid>https://duinaru.github.io/posts/2019-10-23-blog-with-development-and-experience/</guid><description>평소에 생각하던 이것저것을 적어볼까 하다가 블로그를 만들게 되었습니다.
블로그를 운영한다면 블로그 서비스를 이용하는 편이 간단하고 편할 듯 했지만, github.io 라는 도메인이 눈에 들어오더군요.
그래서 github pages로 만들게 되었습니다.
준비물 github
github pages를 서비스할 repository를 만들었습니다.
jekyll
github pages는 jekyll을 지원합니다.
jekyll로 만든 소스를 repository에 올려 두는 것 만으로도 빌드-배포를 해주죠.
ruby
jekyll로 만들려면 ruby가 필요합니다.
build를 하거나, plugin을 설치해서 기능을 추가해볼 수 있습니다.
만들기 ruby
jekyll의 build와 여러 plugin을 설치하기 위해 설치해주었습니다.</description></item></channel></rss>