[{"title":"AWS summit online japan 2021 2日目","date":"","description":"2021年5月11日から2日間、AWS summit online japanに参加しました。","body":"毎年開かれるAWS summit、去年からはCOVID-19でオンライン配信されている状況です。\n今年は5月12日から13日まで両日の間にライブ配信され、31日まで開催されます。\naws summit online japan\n筆者はライブで開催される両日に参加し、各内容をまとめたいと思います。\n2日目 2日目には開発やサーバーレスなど、実際に創ってみる内容に関するセッションに参加しました。\n最後の日であって、特別講演まで長い一日でした。\n基調講演 1日目とは異なり、ほとんどが英語で行い、日本語の字幕がサポートされました。AWSのテネットについて話し始め、多様なサービスを紹介し、AWSのカスタムシリコンについて語りながら、関係会社の方々の話を聞くことができる時間でした。\n前日のpurpose-built databasesが印象的でありましたが、今回は基調講演で話されて、データの重要性を強調したことも印象深かったです。\nセッション 9つのセッションに参加、お昼も厳しかった覚えがあります。\nWeb・モバイルアプリ開発を加速させる AWS Amplify タイトルのままのAWS Amplify紹介セッション\n以前、GraphQLが気になって見つけたサービスでもあります。インフラの大半が簡略化されて、バックエンドとフロントエンドのコードを自動的に生成するなど、アプリケーションの開発をしやすくするサービスです。\n今回はAdmin UIができたという話もありました。\nAWS Amplify と AWS AppSync を使ったフルスタックアプリケーションの開発 AWS Amplifyに続き、AWS AppSyncを使った具体的な開発事例の紹介セッションです。\nAWS AmplifyとAWS AppSyncを利用したアーキテクチャをもとに、認証方法、Graph APIの作成方法、reactコードの自動生成などについてビデオチャットアプリケーションの開発サンプルを見ながら聞きました。\nこれは創ってみたくなりますね。\nAWS におけるネットワーク＆アプリケーション保護のすすめ 今回のセッションでは主にセキュリティーの説明でした。\nSYN floodsやSQL injection、クローラーなど、セキュリティーを害する要素をAWSではAWS Network Firewall、AWS WAF、AWS Shield Advancedでアプリケーションを保護することができるようです。\nAWS で始める Infrastructure as Code タイトルからAWS CloudFormationが思いつくセッションでして参加、思った通りにAWS CloudFormationの説明がありました。\nAWSの環境をコードで管理することについて説明と必要性、目的などを話し、CloudFormationの紹介とサンプルが続きました。\nただ、ymlで知っていたCloudFormationが、Cloud Develop Kitを利用してプログラミング言語で作成できるということも新しかったです。\n変数などプログラミングの考え方で構築しやすく見えましたね。\nイノベーションを加速するサーバーレスアプリケーションのイベント駆動アーキテクチャ 1日目でも見たサーバーレス！見過ごせません。\nAWS Lambdaについて説明し、サーバーレスアプリケーションの必要性、そしてイベント駆動アーキテクチャの説明がありました。\nイベント駆動アーキテクチャについては初めて聞きましたが、興味深い内容でした。\nそして、Lambdaと関わるサービスの話もあったセッションでした。\nAWS でのコンテナワークロードにおける多様なビルディングブロックの選択肢 普段、コンテナの必要性と利点について疑問をもっていましたので、参加しました。\nAWSのコンテナサービスであるAWS Fargate、EKS、ECS、ECRなどについての説明とECS/EKSを比較した話もありました。\nAWS CodePipelineを利用し、自動化する方法の説明もあったセッションです。\nコンテナ・サーバーレスを使えばモダンアプリケーションになりますか？ タイトルから迫力を感じられそうなセッション、設計の重要性を気づかせるセッションでした。\nサンプルアプリケーションについて問題点を話しながら、関連サービスを紹介し、解決していくプレゼンテーションの進め方で理解しやすかったです。\nタイトルのように考えた方にはお勧めです。\n明日から始める!! Chaos Engineering 始め方ガイド Chaos Engineering？？なんでしょう。参加！\n システムが本番環境での不安定な状況を耐えることができる\n 上記の内容に自信を構築するため実施する実験がChaos Engineeringというらしいです。\n徹底的にテストを行っても、サービス中は何かの問題が起こりえます。対策の必要性はエンジニアなら感じているでしょう。\nこれを実際にやってみることがChaos Engineering！簡単に言うとサービス中のインスタンスを落としてどうなるか確認する実験です。\n現在のシステムがWell-ArchitectedになっていてObservabiltyがある状況で実行してこそ価値があると言われます。\n Without observability,\nyou don\u0026rsquo;t have chaos engineering.\nYou just have Chaos.\nCharity Majors\nCofounder/CTO honeycomb.io\n セッションの一部を引用しました。Chaos EngineeringであってChaosになってはならないでしょう。\nタイトルのように明日から始めるかは疑問ですが、興味深いセッションでした。\nOpen-source observability at AWS − 可観測性を支える OSS と AWS の『いま』を知る 2日目の最後のセッションで、observabilityについてのセッションです。\nエンジニアならデバッグでスタックトレース、エラーログ分析など、何かの不具合対応の際に原因調査で調べたりするでしょう。\nそれらは文字ということを読み、全体を理解するまでは多くの時間を必要とします。\n一目で理解できれば、多くの時間を節約することもできるでしょう。\nこれを手伝ってくれるAWSのサービスとOSSが紹介されたセッションです。\nOSSのFluentd、Fluentd Bit、Prometheus、Cortex、OpenTelemetryとAWS X-Ray、FireLens for ECS/EKS、Amazon Managed Service for Prometheus/Grafana、AWS Distro for OpenTelemetryなど、可観測性を支えるサービスの興味を持っているなら、参加してみる価値はあると考えられました。\n特別講演 AWS summit onlineの幕を閉じる時間です。未来はどう変わり、どう変えていくのかについて関係者の議論の形で進みました。\n2日目感想 興味深いテーマが多く、あっという間に2日が過ぎました。\n知っていることでも新しい面を知り、知らなかったことは知っていく時間でした。色々考えながら聞き、面白そうなことも多くありました。\nCOVID-19で直接参加したりパートナーブースを周ることなどはできなく、仕方ないと考えたこともあります。願わくは次はオフラインで会いしょう。\n","ref":"/ja/posts/2021-05-17-aws-summit-online-day2/"},{"title":"AWS summit online japan 2021 1日目","date":"","description":"2021年5月11日から2日間、AWS summit online japanに参加しました。","body":"毎年開かれるAWS summit、去年からはCOVID-19でオンライン配信されている状況です。\n今年は5月12日から13日まで両日の間にライブ配信され、31日まで開催されます。\naws summit online japan\n筆者はライブで開催される両日に参加し、各内容をまとめたいと思います。\n1日目 全般的にデータベースとAIについての内容でした。\n基調講演 テクノロジーが変化させる日本社会というテーマを元に、AWSの説明と成長、大阪リージョンの誕生を話しながら進化していくAWSのプレゼンテーションがありました。\n度々AWSを利用する関係会社の方々の話があり、AWSを利用することでどのように変わり、変えたということを聞けました。\n クラウドの本当の価値は価値創出に集中できるということ\n AWSは上記の目標を達成するために変化していくということを知る時間でした。\nセッション 筆者は主に業務に関わるセッションや興味を持っている技術のセッションに参加しました。\nAI と機械学習を使ったビジネス課題の解決方法 エンジニアなら知っているはずのAI、筆者も興味を持っている技術分野であったため参加しました。\nAIはどのようなものか、MLとDLについて簡単な説明があり、ビジネスでどう適用することができるかについて話がありました。\nAIとビジネスを繋ぐ多様な事例をあげて発表され、サービスの個人化やコールセンターのAI活用など、業務で考える内容でした。\nあなたのオンプレミス DWH、モダナイズしませんか？ — Amazon Redshift へのマイグレーションの手引き DWHという単語にひかれ選んだセッションです。最近、関わりが多く興味がありまして参加しました。\nデータウェアハウスやデータレイクなどモダンなデータ基盤とは何か話し、Amazon Redshiftについて説明が続きました。\nその後、どのようにマイグレーションするか説明し、終了になりました。\nマイグレーションの説明からは難解なところもありましたが、モダン化について考える余地はあると思える時間でした。\n機械学習モデルの開発、学習、デプロイ AIの興味で選んだもう一つのセッションです。AIの開発はウェブ開発とはどのように異なるか、共通点はあるか気になることもありました。\n機械学習のワークフローについての説明とAmazon SageMakerがどのような機能を持ち、提供し、活用できるか知る時間でした。\nAmazon CodeGuru 〜機械学習で実現するコードレビュー自動化とアプリケーションパフォーマンス最適化〜 AIコードレビューサービス、Amazon CodeGuruについて話すセッションです。\nソフトウェアの品質と俊敏性の向上の必要性について話しながら、自然にAmazon CodeGuru Reviewerについての説明が続きました。\nコードレビューをAIが行うことに驚きでしたが、現在はJavaとPythonのみサポートされていることは残念でした。\n後、Amazon CodeGuru Profilerの説明でアプリケーションを可視化し、追跡できるということがありました。\nこのサービスを実務で適用するとどうなるか考えながら参加したセッションでした。\n【基本の AWS サービス】今日からはじめる！ AWS のデータベースと最適なサービスの選び方 AWSで提供されるデータベースサービスは何があり、各サービスについての説明がありました。\n Purpose-built databases\n 状況の合うデータベースを選び、利用することができるという点を知るセッションでした。\nサーバーレスで「使いやすい」API を公開する～作る側・使う側の双方に CircleCI が提供できる価値 本セッションはCircleCI合同会社の関係者からのプレゼンテーションでした。\nCircleCIは日本で知られているCIサービスでもあり、業務に関係している話もありそうで、参加しました。\n主にCircleCIの説明と利用方法でした。\nBuild modern applications with purpose-built databases 前のセッションで聞いたpurpose-built databasesについて気になり参加しました。\nモダンアプリケーションとMicroservicesについて話し、なぜpurpose-built databasesが必要か、そしてどのように使われているか色々な会社の事例を含んだ説明でした。\nデータベースを必要に応じて分けて使用するという概念が漠然とする感もないことはありませんが、設計をしていくことにあたって、考える必要性は十分にあると思いました。\nサーバー立てっぱなしはもったいない！サーバーレスのみで構築する中頻度\u0026amp;短時間バッチ処理 1日目の最後のセッションでした。ほとんど休まず聞いてきて疲れた筆者でしたが、サーバーレスを見過ごせなかったです。\n本セッションは株式会社ゆめみの関係者からのプレゼンテーションでした。\nAWS ECSやAWS Lambdaで創った場合に解決したい点を話しながら、AWS Step Functionsを使用した経験を話しました。\nコスト削減できた。。。という話が印象的でした。\n1日目感想 オンライン参加形で家の気軽に参加できました。AIが話題になっていることは変わらず、CodeGuruやpurpose-built databasesなど魅力的なサービスについて知る1日目でした。\n同時に聞くことだけで疲れることも感じながら、時の流れを感じる1日目でもありました。\n次は2日目について書きたいと思います。\n","ref":"/ja/posts/2021-05-16-aws-summit-online-day1/"},{"title":"GitHub Universe 2020を見てみました。","date":"","description":"","body":"2020年12月9日、普段と変わらずYouTubeをクリックした筆者は、不思議なYouTubeアルゴリズムにより、GitHub Universe 2020を目撃することになりました。\nデベロッパーなら有名なGitHub\u0026hellip;カーソルが勝手に引っ張られることは仕方ないことでしょう。（YouTubeアルゴリズム様、ありがとうございました。）\nそこには一つのURLと、何か変な動画が出ていて、URLをクリックしたらデベロッパーらしいブラックのホームページが出現しました。\nGitHub Universe 2020\n3日の間、オンライン生中継で、4つのテーマに分けて放送されるようでした。\n Developer、Enterprise、PlayそしてUnivers(ity)\n それぞれのテーマは時間帯別のセッションで分かれ、その時間に該当の話題の放送が流れるようになっていました。\nちなみに、筆者は心のままDeveloperをクリックしました。\n待機 始まりにあたって、待機している方々に動画を見せていましたが、これが…\n コーディングでDJing\n デベロッパーなら遊ぶ時もコーディングで遊び…ますね！\n視聴できなかった方のためにも、あとで見れたらいいなと考えます。\nセッション 二人のMCの方からセッションについて話を始めて、セッションの発表者が参加し、話しをしていました。\nオンラインミーティングのように参加し、問題なく進められることにも驚きました。\nここでプレゼンテーションが行われることになります。\n 英語の実力が高かったらと願う筆者は、プレゼンテーションの画像のおかげで助かりました。\n素敵なプレゼンテーション資料、ありがとうございました。\n そのあとは、質疑応答の時間を持って、次のセッションに続く流れでした。\n感想 多様な方々が色々なテーマで話し合うことを見ているうちに、時間があっという間に過ぎました。\n難しいテーマも多かったですが、新しいことも知ることができるイベントで楽しいかったです。\n今回のイベントのプレゼンテーションは後でも見れるようです。\n GitHub Universe 2020 On-Demand\nhttps://githubuniverse.com/on-demand/\n 次にあるかもしれないイベントを待つことも、楽しいかもしれませんね。\n暇な時にPlayチャンネルも見てみましたが、本当に楽しんでいる感じがするイベントでした。\n次にも会いましょう！\n","ref":"/ja/posts/2020-12-11-githubuniverse2020/"},{"title":"GitHub ActionsでGitHub Pagesにデプロイ","date":"","description":"GitHub Actionsを利用してGitHub Pagesにブログサイトをデプロイしました。","body":"GitHub Pagesにもブログサイトをサービスすることにしました。\nGitHub Pagesは基本的にjekyllから自動でビルドしてサービスになりますが、静的ウェブページをそのままサービスすることも可能です。\nそのため、Hugoで作成したブログサイトであってもGitHub Pagesでサービスが可能になります。\nビルドした結果物をデプロイする単純な作業ですので、GitHub Actionsから自動的に行われるようにしました。この投稿ではその方法を書きたいと思います。\nGitHub Actionsとは?  Automate your workflow from idea to production\nGitHub Actions makes it easy to automate all your software workflows, now with world-class CI/CD. Build, test, and deploy your code right from GitHub. Make code reviews, branch management, and issue triaging work the way you want.\nhttps://github.com/features/actions\n ホームページの紹介ですが、アイディアから制作までの作業の流れを自動化！素晴らしいです。\nGitHubのすべてのイベント（commitやpullなど）で実行させることができるようです。\n準備   GitHub Pages Repository\n{GitHubのID}.github.io の名前のrepositoryを作成します。\n  静的ブログサイトソース\n上記のrepositoryのmaster branchに入れておきます。\n  創り GitHub Actions ソース 以下のファイルをrepositoryの /.github/workflows に入れておきましょう。\n # This is a basic workflow to help you get started with Actions name: CI # Controls when the action will run. Triggers the workflow on push or pull request # events but only for the master branch on: push: branches: [ master ] # A workflow run is made up of one or more jobs that can run sequentially or in parallel jobs: # This workflow contains a single job called \u0026#34;build\u0026#34; build: # The type of runner that the job will run on runs-on: ubuntu-latest # Steps represent a sequence of tasks that will be executed as part of the job steps: # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it - uses: actions/checkout@v2 - name: Setup Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: \u0026#39;0.74.3\u0026#39; # extended: true - name: Build hugo run: hugo --gc --minify - name: Git init run: | git config --global user.name \u0026#39;${{github.actor}}\u0026#39; git config --global user.email \u0026#39;${{github.actor}}@users.noreply.github.com\u0026#39; - name: Git add run: git add --force public/ - name: Git commit run: git commit -m \u0026#34;publish\u0026#34; - name: Push public to branch run: | git subtree split --branch public --prefix public/ git push -f origin public:public git branch -D public https://github.com/DuiNaru/duinaru.github.io/blob/master/.github/workflows/main.yml\n そうすることで、master branchにpushがある度に上記のコードが実行されてビルドの結果物であるpublicのフォルダーの内容がpublic branchにpushされることになります。強制的にpushしていますので、もしもpublicというbranchが使用中であればPush public to branchで\u0026ndash;branchとpublic:publicのところを異なるbranchに変えてください。\nまた、0.74.3のHugoを使用していまして、Setup HugoでHugoをインストールし、Build HugoでHugoでビルド、Git addとPush public to branchでビルドされたpublicのフォルダーをデプロイの対象としましたが、別の静的サイトジェネレータを使用した場合はこの部分を合わせて変えましょう。\nHugoをextendedバージョンで使用した場合も該当の注釈を解除しましょう。\nRepository 設定 repositoryのSettingsからGitHub PagesのSource Branchを設定します。\nGitHub Actionsでpublicのbranchにデプロイするようにしましたので、pubilcをsource branchに設定しました。\n終わり pushイベントが発生してしばらく経つと、GitHub Pagesにブログサイトがサービスされているはずです。\n筆者が利用しているNetlify CMSは投稿の度にPull Requestが発生され、master branchにpushします。その都度、GitHub Actionsが実行され、自動的にデプロイしますので、Netlifyと同じ感覚でGitHub Pagesをサービスすることができるようになりました。\n今回はビルドとデプロイのみの静的サイトで簡単でしたが、細かい設定が必要になった場合はどうするかは工夫が必要になりそうです。\n","ref":"/ja/posts/2020-09-11-deloy-github-pages-with-actions/"},{"title":"Netlify CMS + Netlifyでブログサイト管理とデプロイを自動化","date":"","description":"","body":"静的サイトジェネレータで構築したブログはmarkdown形式のファイルで管理され、投稿の度にビルドとデプロイをしなければなりません。これをしやすくするためにNetlify CMSとNetlifyを入れました。\nNetlify CMS Netlify CMSやForestry.ioのように静的サイトジェネレータのcmsは色々あります。\nFrontend Interfaces with Hugo\nどのサービスでも管理の良さは同じと思いますが、Netlifyと併せて使いやすそうなNetlify CMSを入れました。\n特徴 netlify cms - overview\nウェブベース、多くの静的サイトジェネレータのサポートなどの特徴があります。\n特にGitベースで管理することがいいと思います。投稿するとcommitされ、投稿完了にpull request、修正で新しくcommitされることですが、プログラミングを似ていますね。投稿の完了するまでbranchを別に作って管理することもできます。\nインストール テンプレートから始める netlify cms - Start with a Template\n最も早く始める方法です。予めサイトを作成しておく必要がなく、全ての設定が終わっているテンプレートから始めることです。\n新しく始めようとする方や早く見てみたいと思う方にお勧めです。\n既存のサイトに追加 netlify cms - Add to Your Site\n創ってあったブログサイトがある方や初めから設定していきたい方は直接インストールすることもできます。\nファイル作成 管理ページと設定ファイルを作ります。ファイルの格納場所が以下になります。\n    These generators \u0026hellip; store static files in     Jekyll, GitBook / (project root)   Hugo, Gatsby, Nuxt, Gridsome, Zola, Sapper /static   Next /public   Hexo, Middleman, Jigsaw /source   Spike /views   Wyam /input   Pelican /content   VuePress /.vuepress/public   Elmstatic /_site   11ty /_site   preact-cli /src/static    https://www.netlifycms.org/docs/add-to-your-site/#app-file-structure\n 静的サイトジェネレータ別にstaticなウェブページがデプロイされる場所です。hugoで構築したブログですので、staticのフォルダーに格納すればいいです。\n上記のフォルダーにadminというフォルダーを作成し、次の二つのファイルを作成します。\n index.html\n\u0026lt;!doctype html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34; /\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34; /\u0026gt; \u0026lt;title\u0026gt;Content Manager\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;!-- Include the script that builds the page and powers Netlify CMS --\u0026gt; \u0026lt;script src=\u0026#34;https://unpkg.com/netlify-cms@^2.0.0/dist/netlify-cms.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;https://identity.netlify.com/v1/netlify-identity-widget.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; if (window.netlifyIdentity) { window.netlifyIdentity.on(\u0026#34;init\u0026#34;, user =\u0026gt; { if (!user) { window.netlifyIdentity.on(\u0026#34;login\u0026#34;, () =\u0026gt; { document.location.href = \u0026#34;/admin/\u0026#34;; }); } }); } \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; config.yml\nbackend: name: git-gateway branch: master # Branch to update (optional; defaults to master) # This line should *not* be indented publish_mode: editorial_workflow # These lines should *not* be indented media_folder: \u0026#34;/static/img/uploads\u0026#34; # Media files will be stored in the repo under static/images/uploads public_folder: \u0026#34;/img/uploads\u0026#34; # The src attribute for uploaded media will begin with /images/uploads collections: - name: \u0026#34;blog\u0026#34; # Used in routes, e.g., /admin/collections/blog label: \u0026#34;Blog\u0026#34; # Used in the UI folder: \u0026#34;_posts/blog\u0026#34; # The path to the folder where the documents are stored create: true # Allow users to create new documents in this collection slug: \u0026#34;{{year}}-{{month}}-{{day}}-{{slug}}\u0026#34; # Filename template, e.g., YYYY-MM-DD-title.md fields: # The fields for each document, usually in front matter - {label: \u0026#34;Layout\u0026#34;, name: \u0026#34;layout\u0026#34;, widget: \u0026#34;hidden\u0026#34;, default: \u0026#34;blog\u0026#34;} - {label: \u0026#34;Title\u0026#34;, name: \u0026#34;title\u0026#34;, widget: \u0026#34;string\u0026#34;} - {label: \u0026#34;Publish Date\u0026#34;, name: \u0026#34;date\u0026#34;, widget: \u0026#34;datetime\u0026#34;} - {label: \u0026#34;Featured Image\u0026#34;, name: \u0026#34;thumbnail\u0026#34;, widget: \u0026#34;image\u0026#34;} - {label: \u0026#34;Rating (scale of 1-5)\u0026#34;, name: \u0026#34;rating\u0026#34;, widget: \u0026#34;number\u0026#34;} - {label: \u0026#34;Body\u0026#34;, name: \u0026#34;body\u0026#34;, widget: \u0026#34;markdown\u0026#34;} https://www.netlifycms.org/docs/add-to-your-site/#configuration\n index.htmlはNetlfiy CMSにアクセスするためのページで、config.ymlは設定ファイルです。\n設定項目は色々ありますので、公式ホームページから確認できます。\n確認 netlfiy cmsのページを確認します。\nローカルからhugo -serveで駆動し、http://localhost:1313/adminにアクセスするとログイン画面が表示されます。\nNetlifyの設定ファイルの作成 Netlifyにデプロイするための設定ファイルと作成します。ブログサイトのルートにnetlify.tomlのファイルを作成します。該当のファイルにNetlifyの設定ができ、ビルドコマンドや環境変数などを指定することができます。\n#/my-blog/netlify.toml [build] publish = \u0026#34;public\u0026#34; command = \u0026#34;hugo --gc --minify\u0026#34; [context.production.environment] HUGO_VERSION = \u0026#34;0.74.3\u0026#34; HUGO_ENV = \u0026#34;production\u0026#34; HUGO_ENABLEGITINFO = \u0026#34;true\u0026#34; [context.split1] command = \u0026#34;hugo --gc --minify --enableGitInfo\u0026#34; [context.split1.environment] HUGO_VERSION = \u0026#34;0.74.3\u0026#34; HUGO_ENV = \u0026#34;production\u0026#34; [context.deploy-preview] command = \u0026#34;hugo --gc --minify --buildFuture -b $DEPLOY_PRIME_URL\u0026#34; [context.deploy-preview.environment] HUGO_VERSION = \u0026#34;0.74.3\u0026#34; [context.branch-deploy] command = \u0026#34;hugo --gc --minify -b $DEPLOY_PRIME_URL\u0026#34; [context.branch-deploy.environment] HUGO_VERSION = \u0026#34;0.74.3\u0026#34; [context.next.environment] HUGO_ENABLEGITINFO = \u0026#34;true\u0026#34; Repository作成 NetlifyはGitHub、GitLab、Bitbucket のRepositoryからデプロイすることができます。今まで創ったブログサイトをRepositoryにPushしましょう。\nNetlify Netlifyデプロイ ﻿ログイン Netlifyにアクセスし、ログインします。\nhttps://www.netlify.com/\nNew site from Gitのボタンで新規サイトを作成します。初めてアカウントを作成した場合は作成後、新規サイト作成画面が表示される場合もあります。\nサイト作成 ブログRepositoryがあるGitを設定します。\nGitのボタンをクリックするとRepositoryを選択する画面が表示されますので、ブログサイトのRepositoryを選びます。\n次はBranchやビルドコマンドを設定します。デフォルトで設定されていますのでこのまま進みましょう。\nDeploy siteボタンをクリックし、Siteを作成します。\n作成確認 筆者の場合はHugo Future Imperfect Slimをcloneで入れまして、画像のようにFailedと失敗しました。submoduleで入れた場合は成功すると思います。\nSubmodule Pathがないというエラーで、.gitmodulesのファイルをブログサイトのルートに作成し、Pushしました。\n .gitmodules\n[submodule \u0026quot;hugo-future-imperfect-slim\u0026quot;] path = themes/hugo-future-imperfect-slim url = https://github.com/pacollins/hugo-future-imperfect-slim.git  成功すると以下のようにPublishedが確認できます。\nサイト確認 画面に表示されたURLにアクセスすればブログサイトが確認できます。\nNetlify設定 Netlify CMSの使用のため、Netlifyでログイン関連の設定をします。\nIdentity メニューからIdentityをEnableします。この機能を使用することによって、会員登録などの認証機能が使えるようになります。\nEnable Git Gateway Netlify CMSでGitを処理するためにGit GatewayをEnableします。Settings - Identityで、Services - Git GatewayにあるEnable Git Gatewayのボタンをクリックします。\n招待専用に設定 Settings - Identity - RegistrationからEditボタンをクリックし、Invite onlyを選びます。この設定で管理者の招待のみでアカウントを登録することになります。\nアカウント登録 アカウントを登録します。\nInvite usersをクリックし、e-mailを記入してSendボタンをクリックします。\n記入したe-mailに認証メールが届きます。メールのAccept the inviteをクリックするとブログサイトに遷移されます。\nクリックしたURLは以下と似ていますが、adminを入れて修正し、CMSページになるようにします。\n変更前\nhttps://trusting-curran-e13b73.netlify.app/#invite_token=-W5a_7Eao-GCIMVEpr97Vw 変更後\nhttps://trusting-curran-e13b73.netlify.app/admin#invite_token=-W5a_7Eao-GCIMVEpr97Vw そうしたらパスワードを設定する画面が出ます。\n確認 パスワードを設定した後、自動的にログインされてNetlify CMSのメイン画面が表示されます。\nNew Blogで投稿するなどのNetlify CMSの機能を使用できるようになりました。\n感想 終わりました。Netlify CMSを設定しておけば、ウェブで直接投稿できて便利です。\nしかし、日本語や韓国語のタイピングがたまに無視されることがあります。英語は問題ないことでCMSが英語に合わせて作られているかもしれません。\n画像アップロードも便利でいいですが、タイピングは工夫の必要がありそうです。\n","ref":"/ja/posts/2020-09-02-make-blog-with-netlifycms-netlify/"},{"title":"Hugoでブログサイトを構築","date":"","description":"","body":"Hugoでブログサイトを構築してみました。Hugoをインストールし、テーマを入れることですぐに創れます。\nHugo インストール まずは、Hugoをインストールします。\nInstall Hugo\nHugoは基本バージョンとextendedバージョンの二つがあります。extendedバージョンはSCSS/SASSをサポートし、SCSS/SASSを使おうとしたらextendedバージョンのインストールが必要のようです。\n And Now: Hugo Pipes!\nHugo is now released with two binary version: One with and one without SCSS/SASS support. At the time of writing, this is only available in the binaries on the GitHub release page. Brew, Snap builds etc. will come. But note that you only need the extended version if you want to edit SCSS. For your CI server, or if you don’t use SCSS, you will most likely want the non-extended version.\n 今回に入れるテーマがSCSSを使っているようで、extendedバージョンをインストールします。\nパッケージマネージャーインストール Windows環境にインストールしまして、chocolateyを利用し、インストールしました。別の環境でのインストールはInstall Hugoを参考してください。\n Installing Chocolatey\nSet-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString(\u0026#39;https://chocolatey.org/install.ps1\u0026#39;))  管理者権限でPowershellに上記のコマンドーを実行します。セキュリティー設定があるかということでBypassを設定してインストールするらしいです。\nchocoやchoco -?でインストールされたことを確認したら、Hugoをインストールします。\nHugoのインストール  Install Hugo - Chocolatey (Windows)\nchoco install hugo-extended -confirm  hugo versionでインストールされたことが確認できます。0.74.3バージョンがインストールされましたね。\nHugo Static Site Generator v0.74.3/extended windows/amd64 ブログサイト作成 次のコマンドーを実行すればブログサイトが作成できます。new-site-nameはブログサイトが格納されるフォルダー名で、変更できます。\nhugo new site new-site-name 指定したフォルダーが作成され、hugoのディレクトリ構造になっていることが確認できます。\nビルド ブログサイトのフォルダーでhugoコマンドを実行するとpublicというフォルダーにビルドされたファイルが格納されます。このフォルダーが実際のブログサイトになります。\nhugo | EN -------------------+----- Pages | 3 Paginator pages | 0 Non-page files | 0 Static files | 0 Processed images | 0 Aliases | 0 Sitemaps | 1 Cleaned | 0 確認 そして、hugo serve でローカル環境からブログサイトを確認することもできます。\nhugo serve | EN -------------------+----- Pages | 3 Paginator pages | 0 Non-page files | 0 Static files | 0 Processed images | 0 Aliases | 0 Sitemaps | 1 Cleaned | 0 Built in 6 ms Watching for changes in C:\\Hugo\\Sites\\my-blog\\{archetypes,content,data,layouts,static} Watching for config changes in C:\\Hugo\\Sites\\my-blog\\config.toml Environment: \u0026#34;development\u0026#34; Serving pages from memory Running in Fast Render Mode. For full rebuilds on change: hugo server --disableFastRender Web Server is available at http://localhost:1313/ (bind address 127.0.0.1) Press Ctrl+C to stop 上記のコマンドーを実行し、http://localhost:1313/ にアクセスすれば、白い画面が表示されることが確認できます。\nテーマのインストール 何もない画面から創り上げてもいいですが、公開されている様々なテーマがありますので、使いましょう。\nHugo Themes\n一つ選んでインストールしてみます。\nダウンロード Hugo Future Imperfect Slim\nHugo Future Imperfect Slimというテーマをダウンロードしました。テーマはブログサイトディレクトリのthemesフォルダーに入れます。\ncd C:\\Hugo\\Sites\\my-blog\\themes git clone https://github.com/pacollins/hugo-future-imperfect-slim.git 他のテーマであっても、themesのフォルダーに入れればいいです。\nあとは、テーマの設定をすれば完成です。\n設定 テーマの設定はテーマごとに異なりますが、全ての設定はブログサイトディレクトリの下、config.tomlのファイルに設定します。該当ファイルはhugoの設定ファイルで、ブログサイトのタイトルや使用するテーマの設定などが指定できます。\n筆者の場合はHugo Future Imperfect Slim を入れましたので、下記のように設定しました。\n Hugo Future Imperfect Slim - config.toml\nbaseurl = \u0026#34;\u0026#34; DefaultContentLanguage = \u0026#34;en\u0026#34; title = \u0026#34;Hugo Future Imperfect Slim\u0026#34; theme = \u0026#34;hugo-future-imperfect-slim\u0026#34; paginate = 3 disqusShortname = \u0026#34;\u0026#34; googleAnalytics = \u0026#34;\u0026#34; pluralizeListTitles = false disableLanguages = [] [markup.goldmark.renderer] unsafe = true [outputs] home = [\u0026#34;html\u0026#34;, \u0026#34;json\u0026#34;] [params] enableCDN = false cssFiles = [\u0026#34;default\u0026#34;] jsFiles = [\u0026#34;default\u0026#34;] highlightjs = true highlightjsTheme = \u0026#34;default\u0026#34; highlightjsLang = [] viewMorePostsLink = \u0026#34;/blog/\u0026#34; readingTime = true imageStrech = \u0026#34;\u0026#34; socialShare = [\u0026#34;twitter\u0026#34;, \u0026#34;facebook\u0026#34;, \u0026#34;reddit\u0026#34;, \u0026#34;linkedin\u0026#34;, \u0026#34;pinterest\u0026#34;, \u0026#34;email\u0026#34;] [params.meta] description = \u0026#34;A theme by HTML5 UP, ported by Julio Pescador. Slimmed and enhanced by Patrick Collins. Multilingual by StatnMap. Powered by Hugo.\u0026#34; author = \u0026#34;HTML5UP and Hugo\u0026#34; favicon = false svg = true faviconVersion = \u0026#34;1\u0026#34; msColor = \u0026#34;#ffffff\u0026#34; iOSColor = \u0026#34;#ffffff\u0026#34; [params.header] navbarTitle = \u0026#34;Future Imperfect\u0026#34; dynamicTitles = true searchMenu = true shareMenu = true languageMenu = true [params.intro] header = \u0026#34;Hugo Future Imperfect Slim\u0026#34; paragraph = \u0026#34;Another fine, responsive site template by \u0026lt;a href=\u0026#39;http://html5up.net\u0026#39;\u0026gt;HTML5 UP\u0026lt;/a\u0026gt;.\u0026#34; rssIntro = true socialIntro = true hideWhenSingleColumn = false alwaysOnHomepage = false [params.intro.pic] src = \u0026#34;/img/main/logo.jpg\u0026#34; shape = \u0026#34;circle\u0026#34; width = \u0026#34;\u0026#34; alt = \u0026#34;Hugo Future Imperfect Slim\u0026#34; [params.sidebar] about = \u0026#34;This theme was developed for Hugo static site generator.\u0026#34; postAmount = 5 categories = true categoriesByCount = true [params.footer] rssFooter = true socialFooter = true [params.staticman] enabled = false api = \u0026#34;\u0026#34; # No Trailing Slash gitProvider = \u0026#34;github\u0026#34; username = \u0026#34;\u0026#34; repo = \u0026#34;\u0026#34; branch = \u0026#34;\u0026#34; [params.staticman.recaptcha] siteKey = \u0026#34;\u0026#34; encryptedKey = \u0026#34;\u0026#34; [menu] [[menu.main]] name = \u0026#34;Home\u0026#34; identifier = \u0026#34;home\u0026#34; url = \u0026#34;/\u0026#34; pre = \u0026#34;\u0026lt;i class=\u0026#39;fa fa-home\u0026#39;\u0026gt;\u0026lt;/i\u0026gt;\u0026#34; weight = 1 [[menu.main]] name = \u0026#34;About\u0026#34; identifier = \u0026#34;about\u0026#34; url = \u0026#34;/about/\u0026#34; pre = \u0026#34;\u0026lt;i class=\u0026#39;far fa-id-card\u0026#39;\u0026gt;\u0026lt;/i\u0026gt;\u0026#34; weight = 2 [Languages] [Languages.en] LanguageCode = \u0026#34;en\u0026#34; LanguageName = \u0026#34;English\u0026#34; weight = 1 [Languages.fr] LanguageCode = \u0026#34;fr\u0026#34; LanguageName = \u0026#34;Français\u0026#34; title = \u0026#34;Hugo Future Imperfect Slim en français\u0026#34; description = \u0026#34;Un thème par HTML5 UP, porté par Julio Pescador. Simplifié et amélioré par Patrick Collins. Multilingue par StatnMap. Propulsé par Hugo.\u0026#34; weight = 2 [[Languages.fr.menu.main]] name = \u0026#34;Accueil\u0026#34; identifier = \u0026#34;home\u0026#34; url = \u0026#34;/\u0026#34; pre = \u0026#34;\u0026lt;i class=\u0026#39;fas fa-home\u0026#39;\u0026gt;\u0026lt;/i\u0026gt;\u0026#34; weight = 1 [social] # Coding Communities github = \u0026#34;pacollins/hugo-future-imperfect-slim\u0026#34; gitlab = \u0026#34;\u0026#34; stackoverflow = \u0026#34;\u0026#34; # User Number bitbucket = \u0026#34;\u0026#34;  確認 必要な設定をした後、hugo serveを実行してhttp://localhost:1313/にアクセスしてみましょう。\nテーマが適用されていることが確認できます。しかし、何もないので一つ投稿してみましょう。\n投稿 下記のようにコマンドを実行します。投稿で作るファイルはmarkdown形式で、ファイル1個がポスト1個になります。\nhugo new posts/new-post.md content/postsの下にnew-post.mdというファイルが作成されていることが確認できます。投稿はhugo new のコマンドを実行してもいいですし、.mdファイルを直接作成してもいいです。コマンドで作成する場合はdraftをtrueに設定して作られますので、-Dのオプションを付け、ブログサイトを起動しましょう。\nhugo serve -D http://localhost:1313/ にアクセスすれば投稿されていることが確認できます。\n投稿や修正などはそのファイルを変更することでできます。\nしかし、ファイルを一個づつの修正などの管理は不便さがつきものです。そこで、CMSを入れれば、投稿や管理がしやすくなりますので、次はCMSについて投稿しようと思います。\n","ref":"/ja/posts/2020-08-23-blog-with-hugo/"},{"title":"ブログをリニューアルしました","date":"","description":"Github Pages + Jekyll から Netlify + Hugo + Netlify CMS にブログをリニューアルしました。","body":"既存のブログはJekyllで作成し、Github Pagesでサービスしていましたが、多言語対応の改善などでHugoに変え、Netlify + Netlify CMS も入れました。\nこの記事ではリニューアルの時に考えたことについて書きたいと思います。\nHugo Hugoはgo言語で作成された静的サイトジェネレータです。一般的な動的サイトのようにサーバーからウェブページを作って見せることとは異なり、予め作成されたウェブページを見せることになります。サーバーのリソースを節約できることが魅力的です。\nJekyllも静的サイトジェネレータではありますが、Hugoは比較的に最新で、多言語対応も便利で選びました。\n多言語対応 - Jekyll vs Hugo Jekyll Jekyllで多言語対応は主にpluginでサポートされます。\n開発と経験があるブログ- 作る\npolyglotやJekyll Multiple Languages Pluginなどがありますが、どちらもプラグインですので、他のプラグインと互換性を考えるなど、気を付けなければならないところがあります。\nまた、プラグインを使用しなく、Jekyllのコードを書いて作ってもいいですが、不便ということは変わらなさそうでした。\nHugo Hugoの場合は多言語がサポートされています。\nHugo - Multilingual Mode\nもともとサポートされて、便利そうですね。\nNetlify NetlifyはCI/CDツールなのでデプロイまで自動化することができます。\nNetlify CMSで投稿すると、Git repositoryにコミットされます。その直後にNetlifyでビルドされ、ウェブで見ることができるようになります。投稿するたびに手作業ビルドとデプロイ作業をしなくてもよくなります。\nNetlify CMS 前はjekyll-adminのプラグインで管理してきましたが、hugoに変えることで他の方法を探さなければなりませんでした。\nFrontend Interfaces with Hugo\nその中でNetlifyと併せて使いやすく見えるNetlify CMSを選びました。\n投稿や修正、削除がGitで管理され、Gitのメリットも得られるようになります。投稿リストの確認や作成中のプレビューなどもあって便利です。\nTheme テーマは色々ありますが、Hugo Future Imperfect Slimを入れてみました。\nHugo Future Imperfect Slim\nきれいでいいですし、アップデートも続いているので問題があっても対応が早そうです。\nドメイン https://duinaru.netlify.app/ja/\nドメイン名はカスタムしなく、Netlifyデフォルトで設定しておきました。ドメインをカスタムすることになってもNetlifyにドメイン追加設定をすればいいですので、ブログを運営しながら考えてみようと思います。\n次は、リニューアルの過程や悩みなどについて投稿してみます。\n","ref":"/ja/posts/2020-08-22-blog-renewal/"},{"title":"CloudWatchを利用し、一定時間内でSSHのコネクションがない場合はEC2を自動終了させる方法","date":"","description":"","body":"主にCloud9で使用するEC2がSSHのコネクションがない場合は使用することがなく、一定時間を待機した後に自動終了されるように作りました。\nEC2で実行されるスクリプトだけでも出来そうですが、AWSでSSHのモニタリングもできるようにCloudWatchを利用しました。\nIAM User 作成 CloudWatchにSSHのコネクションの数を送信する役割のUserが必要です。\naws cliで接続が可能で、権限はCloudWatchAgentServerPolicyを持つUserを作成しました。\n  EC2にaws cliを設定 CloudWatchにSSHのコネクションの数を送るため、EC2にaws cliをインストールしてUserを設定します。\nインストール aws cliをインストールします。\nInstall the AWS CLI version 1 on Linux\nUser設定 作ったUserで設定します。\nConfiguring the AWS CLI\nSSHのコネクションの数を求める 繋がれているSSHを数を求めた後で、CloudWatchに送信することができるでしょう。\n繋がっているユーザーを求める方法 who 上記のコマンドで現在に接続されているユーザーを求められます。\nSSHで接続した場合、次のように確認できます。\n  しかし、Cloud9で接続した場合は何も出力されないことが確認できます。\n  Cloud9のコネクションは確認できない 何故でしょう。\nCloud9のSSH Host Requirementsを見れば、SSHの接続が要求されていて、SSHを利用することは確かのようです。\n現在、実行されているSSHDの数を求める SSHで繋がれるようですので、実行しているSSHDを求めてみます。\nps -A x | grep \u0026quot;sshd\u0026quot;   sshd: ubuntu [priv]とsshd: ubuntu@nottyがそれぞれ2個ずつ、4個が見えます。\nSSHで接続するときにセキュリティー強化の一環でprivでプロセスを作り、子プロセスで処理させるようです。\n UsePrivilegeSeparation\n それで一つのSSHで二つのプロセスが作成されるようです。\nでは、現在は二つのSSHのコネクションがあるということが分かります。\n次のコマンドでSSHのコネクションの数を求めます。\nps -A x | grep \u0026quot;sshd\u0026quot; | grep \u0026quot;\\\\[priv\\\\]\u0026quot; | wc -l   SSH数を送信 求めたSSHの数がCloudWatchに送信されるようにします。\nput-metric-data --namespace \u0026lt;value\u0026gt; --dimensions \u0026lt;value\u0026gt; --metric-name \u0026lt;value\u0026gt; --value \u0026lt;value\u0026gt; --timestamp \u0026lt;value\u0026gt; ...and more options put-metric-data aws cliを利用してCloudWatchにMetricを送るコマンドです。\n送信したデータを一定の時間単位で記録し、時間ごとに変化を確認することができるようになります。\nこのコマンドでSSHの数をCloudWatchに送信することができます。\ndemension データの詳細情報のような感じで設定できます。\nInstanceId=インスタンスIDでインスタンスIDを設定しましたが、これはCloudWatch Alarmでインスタンス終了アクションはInstanceIdが設定されているMetricだけが可能でしたからです。\nその理由で、自動終了のためにはInstanceIdを設定しなければなりません。\nvalue 送信するMetricの値です。\n現在、実行されているSSHDの数を求めるで分かったコネクションの数を入れました。\ntimestamp Metricの時間を指定することができます。\n送信するときの時間をUTCの形で入れました。\ncrontab 送信を一定周期で繰り返すため、必要です。\n詳しくはこちらで確認でき、設定は次のようにします。\n繰り返されるスクリプトを作成 /home/ubuntu/ssh-count.shで次のようなスクリプトを作りました。\n#!/bin/bash SSH_CONNECTIONS=$(ps -A x | grep sshd | grep \\\\[priv\\\\] | wc -l) TIMESTAMP=$(date --utc +%FT%T.%3NZ) /home/ubuntu/.local/bin/aws cloudwatch put-metric-data --metric-name \u0026quot;SSH Connections\u0026quot; --dimensions InstanceId=\u0026quot;インスタンスID\u0026quot; --namespace \u0026quot;EC2\u0026quot; --value $SSH_CONNECTIONS --timestamp $TIMESTAMP metric-nameは指定したい名前で、InstanceIdは終了させたいインスタンスIDを入れます。\ncrontabにスクリプトを登録 crontab -eに1分ごとに遂行されるように設定しました。\n一番下に次のコマンドを追加すればいいです。\n*/1 * * * * /home/ubuntu/ssh-count.sh 確認 CloudWatch - Metricsで Custom Namespacesの項目のEC2 - InstanceIdから確認できます。\nEC2自動終了 これからは一定時間でSSHの数が0ならばEC2を自動終了するように作ります。\nCloudWatch Alarm設定 CloudWatch - Alarmsで Create alarmをクリックしてAlarmを作ります。\nSpecify metric and conditions この画面では使用するMetricの選択と設定を行います。\nMetric Select MetricをクリックしてSSHのMetricを選択し、StatisticとPeriodを確認します。\nPeriodは期間内で集められたMetricをStatisticで設定した方法で統計して確認することになりますので、1分ごとの間でデータを全部見るためにPeriodを1分に設定しました。\nConditions Threshold typeはStatic、WheneverはLower/Equal、thanは0で設定し、値が0以下でしたらAlarmになるようにしました。\n  Additional configuration 0以下になるとたんにAlarmにならないようにDatapoints to alarmを設定しました。\n  最近の15個内で0以下が15個でしたらAlarmになるようにしました。Periodを1分で設定したので、15分の間にずっと0以下でしたらAlarmになることです。\nConfigure actions この画面ではAlarmの状態に対し、取るActionを設定します。\nNotification AWS SNSに通知を送る考えでしたら、設定します。\nないなら、Removeをクリックします。\nEC2 action EC2に終了の命令を出すことができます。\n下のようにAlarmの場合にStop this instanceをするように設定します。\n  確認 CloudWatch - Alarmsで確認できます。\n終了するときはALARM、終了されて時間が経つとINSUFFICIENT、実行されているときはOKに変わることが見れます。\n限界  とても短いコネクション  1分ごとに実行中のSSHDを数えて送信することで、サンプリングの間に実行されて終了されるSSHDがあったら、記録されないでしょう。\nこのようなコネクションは意味があるとは思いませんので、問題にはならなさそうです。\nSSHが繋がる時にput-metric-dataを実行するようにすれば解決できることもあるでしょう。\n コネクションがなくても待機しているSSHD  使用していなくてもSSHDがすぐに終了されることではありませんので、正確なコネクションの数を求めるためには追加の設定が必要になります。ClientAliveIntervalとClientAliveCountMaxのような設定でしょう。\n 終了の直前にSSHが繋がれる  SSHの数を送信してAlarmで把握し、終了される間に新たに接続がある場合を考えられますが、接続した直後に終了になりますので、問題なさそうです。\n感想 Cloud9のみで利用する考えなら、Cloud9でEC2を構築する方がCloud9に合わせて終了されるのでいいです。\nしかし、自動終了の機能はCloud9を終了して一定時間の後にEC2を終了させるため、Cloud9を終了しても利用する場合があったら、自動終了の機能をOFFにしなければならなりませんので、直接に構築したEC2とさほど違わないです。\nまたは、手動で構築したEC2も考えられます。\nこのような場合も自動で終了させることが出来るということが分かりました。\nこのブログの方法でSSHのコネクションの数を求めて送信するところを変更するば、他の状況でも使えるでしょう。\n","ref":"/ja/posts/2019-12-01-stop-ec2-when-no-ssh-connection-for-a-while/"},{"title":"SSMとCloudWatchでログインする時、EC2が自動起動されるように設定","date":"","description":"","body":"Cloud9を手動で作ったEC2で使用していまして、自動で作る時に使用できるEC2の自動起動のようにしたいと思いました。\nしかし、Cloud9が始まる時にEC2をスタートさせることはできなくてConsoleにSign inする時、起動されるようにしました。\nAWS System Manager EC2を起動させるためにSSMを利用します。\nそのため、SSMがEC2を管理できるようにセットアップをしなければなりません。\nIAM Role 作成 : AmazonSSMManagedInstanceCore EC2をSSMで使用できるようにIAM Roleを作成します。\nAmazonSSMManagedInstanceCoreのpolicyを選択し、作ります。\n  作ったIAMを自動起動させようとするEC2にattachすればいいです。\nAttaching an IAM Role to an Instance\n上のリンクのようにすればいいです。\nIAM Role 作成 : AmazonSSMAutomationRole 今度はSSMを実行する時に必要なIAM Roleを作成します。\nAmazonSSMAutomationRoleのpolicyを選択し、作ります。\n  このroleは後で使います。\n次はログインイベントが発生するとEC2が起動されるように設定します。\nCloudTrail 設定 ログインイベントを使用するためにはCloudTrailを設定する必要があります。\nCloudTrailの左メニューで Trails - Create Trail を選択しましょう。\n  作成し、設定を見るとLoggingがONになっていることが確認できます。\n  CloudTrailの設定が終わりました。\nCloudWatchのRules設定 ログインイベントをCloudWatchで感知し、処理されるようにしましょう。\nCloudWatchの左メニューで Rules - Creates rule を選択します。\nEvent Source   Service NameはAWS Console Sign-inを選択します。\nどんなユーザーもログインする時、イベントに対して処理させたいと思ったらAny userを選択し、\n特定のユーザーがログインする時、イベントに対して処理させたいと思ったらSpecific users(s) by ARNを選択し、ユーザーのarnを入力します。\nTargets ログインイベントの記録とEC2が起動されるように設定します。\nCloudWatch log GroupはLog Groupを入力し、\nSSM AutomationはDocumentをAWS-StartEC2Instanceに選択し、InstanceIdに起動させたいEC2のInstanceIDを入力します。\n下はUse existing roleを選択し、IAM Role 作成 : AmazonSSMAutomationRoleで作成したRoleを指定します。\n  nameを入力し、Enabledがチェックされた状態で作ります。\n確認 EC2が自動的に起動されるか確認してみましょう。\nそのためなら、再ログインしなければならないですね。\n1~2分ぐらいの時間が過ぎたら、Targetsで作成したCloudWatchのLog Groupにログインイベントが記録され、EC2が起動されていました。\n感想 CloudTrailを設定しなくて、ログインイベントが繋がらないとか、\nSSM Automationのroleをちゃんと設定しなくてruleが実行できないとか等、\n試行錯誤を繰り返して成功するようになりました。\nCloud9で作る時に使用可能なEC2の自動起動と似ているように使用することができそうです。\n次は、一定の時間で接続がないと終了されるようにするつもりです。\n","ref":"/ja/posts/2019-11-18-auto-start-ec2-on-sign-in/"},{"title":"Rails画面確認とCloud9設定","date":"","description":"","body":"サンプル画面を確認し、本格的な開発にあたってIDEをCloud9で使用する設定をしました。\nblog 生成 blogという名前のrailsアプリケーションを作りました。\nrails new blog 該当のコマンドで予め用意されているblogアプリケーションがダウンロードされます。\nエラー発生 ダウンロードは完了しましたが、エラーが出ました。\nGem::Ext::BuildError: ERROR: Failed to build gem native extension. current directory: /tmp/bundler20191116-12860-iie6sqlite3-1.4.1/gems/sqlite3-1.4.1/ext/sqlite3 /usr/bin/ruby2.5 -r ./siteconf20191116-12860-3nvvhf.rb extconf.rb checking for sqlite3.h... no sqlite3.h is missing. Try 'brew install sqlite3', 'yum install sqlite-devel' or 'apt-get install libsqlite3-dev' and check your shared library search path (the location where your sqlite3 shared library is located). *** extconf.rb failed *** Could not create Makefile due to some reason, probably lack of necessary libraries and/or headers. Check the mkmf.log file for more details. You may need configuration options. sqlite3 1.4.1がちゃんとインストール出来ていないようです。\ngem install sqlite3 -v '1.4.1'でも同じでしたので、次のコマンドで解決できました。\nsudo apt-get install libsqlite3-dev sudo gem update bundle install railsを実行してみましょう。\nrails server また、エラー エラーが出ました。\n/var/lib/gems/2.5.0/gems/webpacker-4.2.0/lib/webpacker/configuration.rb:95:in `rescue in load': Webpacker configuration file not found /home/ubuntu/blog/config/webpacker.yml. Please run rails webpacker:install Error: No such file or directory @ rb_sysopen - /home/ubuntu/blog/config/webpacker.yml (RuntimeError) webpackerのインストールが必要そうですね。\n先ずはnode.jsとyarnをインストールし、webpackerをインストールしました。\ncurl -sL https://deb.nodesource.com/setup_13.x | sudo -E bash - sudo apt-get install -y nodejs curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add - echo \u0026quot;deb https://dl.yarnpkg.com/debian/ stable main\u0026quot; | sudo tee /etc/apt/sources.list.d/yarn.list sudo apt-get update \u0026amp;\u0026amp; sudo apt-get install yarn rails webpacker:install インストール完了後、railsサーバを立ち上げることができました。\n  接続してみましょう。 ローカル環境でしたら、127.0.0.1:3000で接続できますが、今はec2で、設定を変えました。\n80ポートを使用可能にSecurity Groupの設定を変更 EC2のSecurity GroupのInboundに80ポートを追加しました。\n0.0.0.0:80でサーバ起動 rails server -b 0.0.0.0 -p 80 接続 EC2のパブリックipに接続してみました。\n サーバ起動中\nメイン画面\n やっとメイン画面が出ました。これからは本格的な開発になりそうですね。\nCloud9設定 その前に、IDEを使用するために設定しました。\nSSHでアクセスすればどんなIDEも使用可能ですが、AWSのEC2で環境を構築しまして、IDEもAWSの物を使ってみます。\nCloud9は最初からすぐにEC2で環境構築が可能ですが、今回は作ったEC2を使用します。\nCreating an SSH Environment\n接続するipが変わらないようにelastic ipを割り当て、上のリンクにある~/.ssh/authorized_keysを作成しました。\n後は、AWS Cloud9 Installerが実行されました。\n  インストールが終わった後、Cloud9の画面の下のbashにrails server -b 0.0.0.0 -p 80を実行し、サーバが立ち上がってメイン画面も確認できました。\nこれからは本格的な開発になりそうです。\n","ref":"/ja/posts/2019-11-16-develop-using-cloud9/"},{"title":"ruby on railsをec2に実装してみました。","date":"","description":"","body":"rubyを知りましたので、rubyでウェブサイトを開発したくてruby on railsを始めました。\n開発しながらruby on railsを学習する目的で、環境構築から始めました。\nEC2 生成 AMI\nubuntu(Ubuntu Server 18.04 LTS (HVM), SSD Volume Type)を選びました。\n他の設定はfree-tierができるようにしました。\nSecurity groups\nSSHができるように22ポートは可能にし、他はその時に解放します。\nインストール SSHで接続し、インストールします。\nRuby on Rails の Getting Started with Rails を元に進めました。\nパッケージアップデート sudo apt-get update Ruby インストール sudo apt-get install ruby-full Ruby バージョン確認 ruby -v railsで要求されるruby 2.5.0の以降のバージョンか確認します。\n  2.5.xですね。\nsqlite3 インストール sudo apt-get install sqlite3 sqlite3 バージョン確認 sqlite3 --version rails インストール sudo gem install rails インストールのエラー  Could not create Makefile due to some reason, probably lack of necessary libraries and/or headers.\n インストールの途中でエラーが発生しました。Nokogiriで一部のライブラリがなくて出るエラーのようですね。\nNokogiri Homepageで解決策を探してみましょう。\ninstall-with-system-librariesのようにしたらできました。\nsudo apt-get install pkg-config rails のインストールを続きます。\nrails バージョン確認 rails --version   やっとインストール完了です。\n次はCreating the Blog Applicationでメイン画面まで進んでみます。\n","ref":"/ja/posts/2019-11-14-set-up-ruby-on-rails-ec2/"},{"title":"ブログにコメント機能を追加しました","date":"","description":"","body":"使用しているMinimal Mistakes テーマは多様なコメントサービスを使えるように設定できて、使いました。\nコメントを追加するページにcomment: trueを追加し、_config.xmlには使用するサービスの情報を入力すればできます。\n筆者はdisqusというコメントサービスを使ってみました。\ndisqusに会員登録してサイトを生成し、ShortNameを分かればできます。\nshortnameはサイトを生成する時や、生成した後に設定ページでも分かります。\n site生成\nsite設定\n 後は_config.xmlに設定すればできます。\n会員登録と使用設定すれば終わるので、簡単ですね。\n確認してみましょう。\n 出ない。\n 理由を探してみましょう。\nおかしいです。どう見ても今までの設定でできそうです。\nそれで、Minimal Mistakesでdisqusと関係したcommentのソースコードを探してみました。\n _includes\\comments.html\n disqusのためにsectionを作っていることが確認できます。\nそれで、該当のhtmlをincludeしているファイルを探してみました。\n _layouts\\single.html\n singleのレイアウトページの一部です。\n何かの条件でincludeをしていることが確認できます。\nsite.comments.providerは_config.xmlで設定し、page.commentsはtrueに設定しておきました。\n jekyll.environment == \u0026lsquo;production\u0026rsquo;は？\n あ、Minimal Mistakes comment設定のNoteがこの内容のようですね！\njekyllをproduction環境でbuildする jekyll build オプションでEnvironmentを設定できます。\nコードからはjekyll.environmentで読み取れ、buildの設定に分けて異なる結果物を作ることができるようになります。\nMinimal Mistakesはproductionでbuildした場合のみ、commentを使用できるようにしてありますので、buildの時にEnvironmentをproductionに設定しなければなりません。\nGitHub Pagesでbuildする場合なら、自動的にproductionに設定されてbuildされますが、筆者はlocalでbuildをしているので設定する必要がありました。\nlinuxの環境でしたら、Environmentで説明しているようにすればいいですが、windowsなら別です。\ncmdの場合\nset JEKYLL_ENV=production powershellの場合\n$env:JEKYLL_ENV = \u0026#39;production\u0026#39; 上記のコマンドを実行した後にbuildやserveをしたら、productionで作られます。\nこれで、Minimal Mistakesにコメント機能を追加することができました。\n","ref":"/ja/posts/2019-11-03-experience-using-comments-with-minimal-mistakes/"},{"title":"GitHub PagesでサポートされないPluginを使う方法","date":"","description":"","body":"jekyllを公式的にサポートするGitHub Pagesですが、全てのjekyllのpluginまでサポートすることではありません。\nGitHub Pagesはサポートするpluginが制限されています。\nこれ以外のpluginはGitHub Pagesでjekyllをbuildする時、制限されて適用されません。\nでは、GitHub Pagesでjekyllを使って、ウェブページサービスを作る時は一部のpluginだけ使用しなければならないでしょうか。\n半分は正しく、半分は違います。\nなぜか調べるまえにGitHub Pagesがどのようにjekyllを使うか調べましょう。\nGitHub Pages with jekyll source\nGithub Pagesでjekyllを使う簡単な方法です。\n公式ヘルプでも説明する方法のように、jekyllのソースをrepositoryに上げておいてGitHub Pagesがjekyllをbuildする方法です。\nGitHub Pagesで問題なく使用可能なpluginで制限され、pluginの互換性などの問題についてあまり気を使わなく作ることができるいいところがあります。\nGitHub Pages without jekyll source\nGitHub Pagesは基本的に静的ウェブページホスティングサービスですので、jekyllのソースではなくウェブファイルだけあってもサービスが可能です。\nつまり、何で作ったとしても、サービスに必要なファイルだけあれば問題ないということです。\nこのようなファイルはjekyllでbuildした時に_siteのディレクトリの中に出来上がるので、このファイルを直接GitHub Pagesのrepositoryに上げても問題なくサービスできます。\nGitHub PagesでサポートしないjekyllのPluginで作ったファイルも例外ではありません。\nGitHub Pages with an unsupported plugin サポートされないpluginでもローカルでbuildした後、ファイルを上げればサービスが可能になります。\nこのためには先ずはどのbranchがGitHub Pagesに設定されているか確認する必要があります。\nrepositoryのsettingsにGitHub Pagesという項目があります。\n  筆者の場合はmaster branchを使用中ということを確認できました。\nですので、master branchにjekyllでbuildしたファイルを上げておけば、GitHub Pagesをサービスすることができるようになります。\nソースとファイルを分けて、管理\nmaster branchにbuildしたファイルを上げたら、ソースは分けて上げたくなりました。\nそれでsourcesというbranchを作り、ソースは該当のbranchにpushするとことにしました。\nしかし、buildされたファイルはmaster branchにpushしなければならないので、都度branchを変更してpushする面倒なことになりました。\nこれを全て手作業でしたら、ミスも出るし、面倒なので、下のようなPowerShell Scriptを作って自動化しました。\nPowerShell Script\nchcp 65001 $env:JEKYLL_ENV = \u0026#39;production\u0026#39; rm -r _site/* git clone -b master https://github.com/DuiNaru/duinaru.github.io.git _site bundle exec jekyll build cd _site git add -A git commit -am \u0026#39;jekyll build\u0026#39; git push build時、エラーを解決するためのchcp 65001とjekyllをproduction環境でbuildするための$env:JEKYLL_ENV = 'production'が含まれています。\njekyllをproduction環境でbuildをして上げる理由については次に説明します。\nこれで、GitHub Pagesがサポートしないpluginでもサービスが可能になりました。\n","ref":"/ja/posts/2019-10-26-how-to-make-a-github-pages-work-with-an-unsupported-plugin/"},{"title":"開発と経験があるブログ","date":"","description":"","body":"普段考えていた色々なものを書こうとブログを作ることにしました。\nブログを運営するならブログサービスを利用した方が簡単で便利だろうと思っていた時にgithub.ioというドメインを見つけました。\n結果としては、github pagesで実装しました。\n必要な物 github\ngithub pagesをサービスするrepositoryを作りました。\njekyll\ngithub pagesはjekyllをサポートします。\njekyllで作ったソースをrepositoryに置いておくだけでビルド-デプロイをしてくれます。\nruby\njekyllで作るにはrubyが必要です。\nbuildをしたり、pluginをインストールして機能を追加することができます。\n作る ruby\njekyllのbuildと様々なpluginを利用するためにインストールしました。\njekyllの公式ホームページに手順があり、便利でした。\nマルチランゲージ\n少なくとも2ヶ国語で運営することを目指してしていまして、マルチランゲージのサポートのためpolyglot pluginを使用しました。\nこのプラグインはgithub pagesで公式的にサポートするプラグインではありませんので、単純にrepositoryにソースを置いておくことだけでビルドはできません。\nでも、対策はあるでしょう。\nテーマ\nテーマを選ぶことに時間がかなりかかりました。\nこれにしようかあれにしようかとしたら時間があっという間に過ぎました。\n結局はMinimal Mistakesにすることにしました。\nしかし、ここで問題が発生しました。\n buildの時、エラーが出ます。\npolyglot pluginが動かないです。\n 問題解決 windows環境でbuildの時、文字関連エラーの解決\nrubyをwindowsの環境で使おうとしたら出るエラーでした。\n  vscodeからcmdでビルドしていたので、chcp 65001 でUTF-8に変えて解決しました。\n他には、jekyllをエラーが出ないバージョンに変更する方法もありますが、下記の問題でバージョンを制限するしかありませんでした。\nMinimal Mistakesとpolyglot pluginを共に使用\nウェブページを正常に作れない問題が出ました。\nこれについては色々トライし、次のように解決できました。\njekyllバージョン制限\njekyllのバージョンを3.8.6としたら、polyglot pluginと共に動きました。\npolyglot pluginの_config.xml設定\n  languagesの言語の一番目をdefault_langに設定したらpolyglot pluginがうまく動きました。\n機能追加 言語セレクタ\nマルチランゲージのサポートのため、言語を変更する機能を追加しました。\nページの下にあるJAやKOなどのものです。\nコメント\nMinimal Mistakesで提供するdisqusを利用し、実装しました。\n感想 多様な機能を実現してかなり時間が過ぎました。\nこれからはポストも作成しつつ、また新しい機能を追加していきたいと思います。\n","ref":"/ja/posts/2019-10-23-blog-with-development-and-experience/"}]