<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on DuiNaru | 開発と経験を載せるブログ</title><link>https://duinaru.github.io/ja/posts/</link><description>Recent content in Posts on DuiNaru | 開発と経験を載せるブログ</description><generator>Hugo -- gohugo.io</generator><language>ja</language><lastBuildDate>Mon, 17 May 2021 15:09:39 +0000</lastBuildDate><atom:link href="https://duinaru.github.io/ja/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>AWS summit online japan 2021 2日目</title><link>https://duinaru.github.io/ja/posts/2021-05-17-aws-summit-online-day2/</link><pubDate>Mon, 17 May 2021 15:09:39 +0000</pubDate><guid>https://duinaru.github.io/ja/posts/2021-05-17-aws-summit-online-day2/</guid><description>毎年開かれるAWS summit、去年からはCOVID-19でオンライン配信されている状況です。
今年は5月12日から13日まで両日の間にライブ配信され、31日まで開催されます。
aws summit online japan
筆者はライブで開催される両日に参加し、各内容をまとめたいと思います。
2日目 2日目には開発やサーバーレスなど、実際に創ってみる内容に関するセッションに参加しました。
最後の日であって、特別講演まで長い一日でした。
基調講演 1日目とは異なり、ほとんどが英語で行い、日本語の字幕がサポートされました。AWSのテネットについて話し始め、多様なサービスを紹介し、AWSのカスタムシリコンについて語りながら、関係会社の方々の話を聞くことができる時間でした。
前日のpurpose-built databasesが印象的でありましたが、今回は基調講演で話されて、データの重要性を強調したことも印象深かったです。
セッション 9つのセッションに参加、お昼も厳しかった覚えがあります。
Web・モバイルアプリ開発を加速させる AWS Amplify タイトルのままのAWS Amplify紹介セッション
以前、GraphQLが気になって見つけたサービスでもあります。インフラの大半が簡略化されて、バックエンドとフロントエンドのコードを自動的に生成するなど、アプリケーションの開発をしやすくするサービスです。
今回はAdmin UIができたという話もありました。
AWS Amplify と AWS AppSync を使ったフルスタックアプリケーションの開発 AWS Amplifyに続き、AWS AppSyncを使った具体的な開発事例の紹介セッションです。
AWS AmplifyとAWS AppSyncを利用したアーキテクチャをもとに、認証方法、Graph APIの作成方法、reactコードの自動生成などについてビデオチャットアプリケーションの開発サンプルを見ながら聞きました。
これは創ってみたくなりますね。
AWS におけるネットワーク＆アプリケーション保護のすすめ 今回のセッションでは主にセキュリティーの説明でした。
SYN floodsやSQL injection、クローラーなど、セキュリティーを害する要素をAWSではAWS Network Firewall、AWS WAF、AWS Shield Advancedでアプリケーションを保護することができるようです。
AWS で始める Infrastructure as Code タイトルからAWS CloudFormationが思いつくセッションでして参加、思った通りにAWS CloudFormationの説明がありました。
AWSの環境をコードで管理することについて説明と必要性、目的などを話し、CloudFormationの紹介とサンプルが続きました。
ただ、ymlで知っていたCloudFormationが、Cloud Develop Kitを利用してプログラミング言語で作成できるということも新しかったです。
変数などプログラミングの考え方で構築しやすく見えましたね。
イノベーションを加速するサーバーレスアプリケーションのイベント駆動アーキテクチャ 1日目でも見たサーバーレス！見過ごせません。
AWS Lambdaについて説明し、サーバーレスアプリケーションの必要性、そしてイベント駆動アーキテクチャの説明がありました。
イベント駆動アーキテクチャについては初めて聞きましたが、興味深い内容でした。
そして、Lambdaと関わるサービスの話もあったセッションでした。
AWS でのコンテナワークロードにおける多様なビルディングブロックの選択肢 普段、コンテナの必要性と利点について疑問をもっていましたので、参加しました。</description></item><item><title>AWS summit online japan 2021 1日目</title><link>https://duinaru.github.io/ja/posts/2021-05-16-aws-summit-online-day1/</link><pubDate>Sun, 16 May 2021 09:19:12 +0000</pubDate><guid>https://duinaru.github.io/ja/posts/2021-05-16-aws-summit-online-day1/</guid><description>毎年開かれるAWS summit、去年からはCOVID-19でオンライン配信されている状況です。
今年は5月12日から13日まで両日の間にライブ配信され、31日まで開催されます。
aws summit online japan
筆者はライブで開催される両日に参加し、各内容をまとめたいと思います。
1日目 全般的にデータベースとAIについての内容でした。
基調講演 テクノロジーが変化させる日本社会というテーマを元に、AWSの説明と成長、大阪リージョンの誕生を話しながら進化していくAWSのプレゼンテーションがありました。
度々AWSを利用する関係会社の方々の話があり、AWSを利用することでどのように変わり、変えたということを聞けました。
クラウドの本当の価値は価値創出に集中できるということ
AWSは上記の目標を達成するために変化していくということを知る時間でした。
セッション 筆者は主に業務に関わるセッションや興味を持っている技術のセッションに参加しました。
AI と機械学習を使ったビジネス課題の解決方法 エンジニアなら知っているはずのAI、筆者も興味を持っている技術分野であったため参加しました。
AIはどのようなものか、MLとDLについて簡単な説明があり、ビジネスでどう適用することができるかについて話がありました。
AIとビジネスを繋ぐ多様な事例をあげて発表され、サービスの個人化やコールセンターのAI活用など、業務で考える内容でした。
あなたのオンプレミス DWH、モダナイズしませんか？ — Amazon Redshift へのマイグレーションの手引き DWHという単語にひかれ選んだセッションです。最近、関わりが多く興味がありまして参加しました。
データウェアハウスやデータレイクなどモダンなデータ基盤とは何か話し、Amazon Redshiftについて説明が続きました。
その後、どのようにマイグレーションするか説明し、終了になりました。
マイグレーションの説明からは難解なところもありましたが、モダン化について考える余地はあると思える時間でした。
機械学習モデルの開発、学習、デプロイ AIの興味で選んだもう一つのセッションです。AIの開発はウェブ開発とはどのように異なるか、共通点はあるか気になることもありました。
機械学習のワークフローについての説明とAmazon SageMakerがどのような機能を持ち、提供し、活用できるか知る時間でした。
Amazon CodeGuru 〜機械学習で実現するコードレビュー自動化とアプリケーションパフォーマンス最適化〜 AIコードレビューサービス、Amazon CodeGuruについて話すセッションです。
ソフトウェアの品質と俊敏性の向上の必要性について話しながら、自然にAmazon CodeGuru Reviewerについての説明が続きました。
コードレビューをAIが行うことに驚きでしたが、現在はJavaとPythonのみサポートされていることは残念でした。
後、Amazon CodeGuru Profilerの説明でアプリケーションを可視化し、追跡できるということがありました。
このサービスを実務で適用するとどうなるか考えながら参加したセッションでした。
【基本の AWS サービス】今日からはじめる！ AWS のデータベースと最適なサービスの選び方 AWSで提供されるデータベースサービスは何があり、各サービスについての説明がありました。
Purpose-built databases
状況の合うデータベースを選び、利用することができるという点を知るセッションでした。
サーバーレスで「使いやすい」API を公開する～作る側・使う側の双方に CircleCI が提供できる価値 本セッションはCircleCI合同会社の関係者からのプレゼンテーションでした。
CircleCIは日本で知られているCIサービスでもあり、業務に関係している話もありそうで、参加しました。
主にCircleCIの説明と利用方法でした。</description></item><item><title>GitHub Universe 2020を見てみました。</title><link>https://duinaru.github.io/ja/posts/2020-12-11-githubuniverse2020/</link><pubDate>Fri, 11 Dec 2020 14:48:24 +0000</pubDate><guid>https://duinaru.github.io/ja/posts/2020-12-11-githubuniverse2020/</guid><description>2020年12月9日、普段と変わらずYouTubeをクリックした筆者は、不思議なYouTubeアルゴリズムにより、GitHub Universe 2020を目撃することになりました。
デベロッパーなら有名なGitHub&amp;hellip;カーソルが勝手に引っ張られることは仕方ないことでしょう。（YouTubeアルゴリズム様、ありがとうございました。）
そこには一つのURLと、何か変な動画が出ていて、URLをクリックしたらデベロッパーらしいブラックのホームページが出現しました。
GitHub Universe 2020
3日の間、オンライン生中継で、4つのテーマに分けて放送されるようでした。
Developer、Enterprise、PlayそしてUnivers(ity)
それぞれのテーマは時間帯別のセッションで分かれ、その時間に該当の話題の放送が流れるようになっていました。
ちなみに、筆者は心のままDeveloperをクリックしました。
待機 始まりにあたって、待機している方々に動画を見せていましたが、これが…
コーディングでDJing
デベロッパーなら遊ぶ時もコーディングで遊び…ますね！
視聴できなかった方のためにも、あとで見れたらいいなと考えます。
セッション 二人のMCの方からセッションについて話を始めて、セッションの発表者が参加し、話しをしていました。
オンラインミーティングのように参加し、問題なく進められることにも驚きました。
ここでプレゼンテーションが行われることになります。
英語の実力が高かったらと願う筆者は、プレゼンテーションの画像のおかげで助かりました。
素敵なプレゼンテーション資料、ありがとうございました。
そのあとは、質疑応答の時間を持って、次のセッションに続く流れでした。
感想 多様な方々が色々なテーマで話し合うことを見ているうちに、時間があっという間に過ぎました。
難しいテーマも多かったですが、新しいことも知ることができるイベントで楽しいかったです。
今回のイベントのプレゼンテーションは後でも見れるようです。
GitHub Universe 2020 On-Demand
https://githubuniverse.com/on-demand/
次にあるかもしれないイベントを待つことも、楽しいかもしれませんね。
暇な時にPlayチャンネルも見てみましたが、本当に楽しんでいる感じがするイベントでした。
次にも会いましょう！</description></item><item><title>GitHub ActionsでGitHub Pagesにデプロイ</title><link>https://duinaru.github.io/ja/posts/2020-09-11-deloy-github-pages-with-actions/</link><pubDate>Fri, 11 Sep 2020 13:52:18 +0000</pubDate><guid>https://duinaru.github.io/ja/posts/2020-09-11-deloy-github-pages-with-actions/</guid><description>GitHub Pagesにもブログサイトをサービスすることにしました。
GitHub Pagesは基本的にjekyllから自動でビルドしてサービスになりますが、静的ウェブページをそのままサービスすることも可能です。
そのため、Hugoで作成したブログサイトであってもGitHub Pagesでサービスが可能になります。
ビルドした結果物をデプロイする単純な作業ですので、GitHub Actionsから自動的に行われるようにしました。この投稿ではその方法を書きたいと思います。
GitHub Actionsとは? Automate your workflow from idea to production
GitHub Actions makes it easy to automate all your software workflows, now with world-class CI/CD. Build, test, and deploy your code right from GitHub. Make code reviews, branch management, and issue triaging work the way you want.
https://github.com/features/actions
ホームページの紹介ですが、アイディアから制作までの作業の流れを自動化！素晴らしいです。
GitHubのすべてのイベント（commitやpullなど）で実行させることができるようです。
準備 GitHub Pages Repository
{GitHubのID}.github.io の名前のrepositoryを作成します。
静的ブログサイトソース</description></item><item><title>Netlify CMS + Netlifyでブログサイト管理とデプロイを自動化</title><link>https://duinaru.github.io/ja/posts/2020-09-02-make-blog-with-netlifycms-netlify/</link><pubDate>Wed, 02 Sep 2020 16:00:24 +0000</pubDate><guid>https://duinaru.github.io/ja/posts/2020-09-02-make-blog-with-netlifycms-netlify/</guid><description>静的サイトジェネレータで構築したブログはmarkdown形式のファイルで管理され、投稿の度にビルドとデプロイをしなければなりません。これをしやすくするためにNetlify CMSとNetlifyを入れました。
Netlify CMS Netlify CMSやForestry.ioのように静的サイトジェネレータのcmsは色々あります。
Frontend Interfaces with Hugo
どのサービスでも管理の良さは同じと思いますが、Netlifyと併せて使いやすそうなNetlify CMSを入れました。
特徴 netlify cms - overview
ウェブベース、多くの静的サイトジェネレータのサポートなどの特徴があります。
特にGitベースで管理することがいいと思います。投稿するとcommitされ、投稿完了にpull request、修正で新しくcommitされることですが、プログラミングを似ていますね。投稿の完了するまでbranchを別に作って管理することもできます。
インストール テンプレートから始める netlify cms - Start with a Template
最も早く始める方法です。予めサイトを作成しておく必要がなく、全ての設定が終わっているテンプレートから始めることです。
新しく始めようとする方や早く見てみたいと思う方にお勧めです。
既存のサイトに追加 netlify cms - Add to Your Site
創ってあったブログサイトがある方や初めから設定していきたい方は直接インストールすることもできます。
ファイル作成 管理ページと設定ファイルを作ります。ファイルの格納場所が以下になります。
These generators &amp;hellip; store static files in Jekyll, GitBook / (project root) Hugo, Gatsby, Nuxt, Gridsome, Zola, Sapper /static Next /public Hexo, Middleman, Jigsaw /source Spike /views Wyam /input Pelican /content VuePress /.</description></item><item><title>Hugoでブログサイトを構築</title><link>https://duinaru.github.io/ja/posts/2020-08-23-blog-with-hugo/</link><pubDate>Sun, 23 Aug 2020 11:08:50 +0000</pubDate><guid>https://duinaru.github.io/ja/posts/2020-08-23-blog-with-hugo/</guid><description>Hugoでブログサイトを構築してみました。Hugoをインストールし、テーマを入れることですぐに創れます。
Hugo インストール まずは、Hugoをインストールします。
Install Hugo
Hugoは基本バージョンとextendedバージョンの二つがあります。extendedバージョンはSCSS/SASSをサポートし、SCSS/SASSを使おうとしたらextendedバージョンのインストールが必要のようです。
And Now: Hugo Pipes!
Hugo is now released with two binary version: One with and one without SCSS/SASS support. At the time of writing, this is only available in the binaries on the GitHub release page. Brew, Snap builds etc. will come. But note that you only need the extended version if you want to edit SCSS. For your CI server, or if you don’t use SCSS, you will most likely want the non-extended version.</description></item><item><title>ブログをリニューアルしました</title><link>https://duinaru.github.io/ja/posts/2020-08-22-blog-renewal/</link><pubDate>Sat, 22 Aug 2020 13:19:47 +0000</pubDate><guid>https://duinaru.github.io/ja/posts/2020-08-22-blog-renewal/</guid><description>既存のブログはJekyllで作成し、Github Pagesでサービスしていましたが、多言語対応の改善などでHugoに変え、Netlify + Netlify CMS も入れました。
この記事ではリニューアルの時に考えたことについて書きたいと思います。
Hugo Hugoはgo言語で作成された静的サイトジェネレータです。一般的な動的サイトのようにサーバーからウェブページを作って見せることとは異なり、予め作成されたウェブページを見せることになります。サーバーのリソースを節約できることが魅力的です。
Jekyllも静的サイトジェネレータではありますが、Hugoは比較的に最新で、多言語対応も便利で選びました。
多言語対応 - Jekyll vs Hugo Jekyll Jekyllで多言語対応は主にpluginでサポートされます。
開発と経験があるブログ- 作る
polyglotやJekyll Multiple Languages Pluginなどがありますが、どちらもプラグインですので、他のプラグインと互換性を考えるなど、気を付けなければならないところがあります。
また、プラグインを使用しなく、Jekyllのコードを書いて作ってもいいですが、不便ということは変わらなさそうでした。
Hugo Hugoの場合は多言語がサポートされています。
Hugo - Multilingual Mode
もともとサポートされて、便利そうですね。
Netlify NetlifyはCI/CDツールなのでデプロイまで自動化することができます。
Netlify CMSで投稿すると、Git repositoryにコミットされます。その直後にNetlifyでビルドされ、ウェブで見ることができるようになります。投稿するたびに手作業ビルドとデプロイ作業をしなくてもよくなります。
Netlify CMS 前はjekyll-adminのプラグインで管理してきましたが、hugoに変えることで他の方法を探さなければなりませんでした。
Frontend Interfaces with Hugo
その中でNetlifyと併せて使いやすく見えるNetlify CMSを選びました。
投稿や修正、削除がGitで管理され、Gitのメリットも得られるようになります。投稿リストの確認や作成中のプレビューなどもあって便利です。
Theme テーマは色々ありますが、Hugo Future Imperfect Slimを入れてみました。
Hugo Future Imperfect Slim
きれいでいいですし、アップデートも続いているので問題があっても対応が早そうです。
ドメイン https://duinaru.netlify.app/ja/
ドメイン名はカスタムしなく、Netlifyデフォルトで設定しておきました。ドメインをカスタムすることになってもNetlifyにドメイン追加設定をすればいいですので、ブログを運営しながら考えてみようと思います。
次は、リニューアルの過程や悩みなどについて投稿してみます。</description></item><item><title>CloudWatchを利用し、一定時間内でSSHのコネクションがない場合はEC2を自動終了させる方法</title><link>https://duinaru.github.io/ja/posts/2019-12-01-stop-ec2-when-no-ssh-connection-for-a-while/</link><pubDate>Sun, 01 Dec 2019 12:03:06 +0000</pubDate><guid>https://duinaru.github.io/ja/posts/2019-12-01-stop-ec2-when-no-ssh-connection-for-a-while/</guid><description>主にCloud9で使用するEC2がSSHのコネクションがない場合は使用することがなく、一定時間を待機した後に自動終了されるように作りました。
EC2で実行されるスクリプトだけでも出来そうですが、AWSでSSHのモニタリングもできるようにCloudWatchを利用しました。
IAM User 作成 CloudWatchにSSHのコネクションの数を送信する役割のUserが必要です。
aws cliで接続が可能で、権限はCloudWatchAgentServerPolicyを持つUserを作成しました。
EC2にaws cliを設定 CloudWatchにSSHのコネクションの数を送るため、EC2にaws cliをインストールしてUserを設定します。
インストール aws cliをインストールします。
Install the AWS CLI version 1 on Linux
User設定 作ったUserで設定します。
Configuring the AWS CLI
SSHのコネクションの数を求める 繋がれているSSHを数を求めた後で、CloudWatchに送信することができるでしょう。
繋がっているユーザーを求める方法 who 上記のコマンドで現在に接続されているユーザーを求められます。
SSHで接続した場合、次のように確認できます。
しかし、Cloud9で接続した場合は何も出力されないことが確認できます。
Cloud9のコネクションは確認できない 何故でしょう。
Cloud9のSSH Host Requirementsを見れば、SSHの接続が要求されていて、SSHを利用することは確かのようです。
現在、実行されているSSHDの数を求める SSHで繋がれるようですので、実行しているSSHDを求めてみます。
ps -A x | grep &amp;quot;sshd&amp;quot; sshd: ubuntu [priv]とsshd: ubuntu@nottyがそれぞれ2個ずつ、4個が見えます。
SSHで接続するときにセキュリティー強化の一環でprivでプロセスを作り、子プロセスで処理させるようです。
UsePrivilegeSeparation
それで一つのSSHで二つのプロセスが作成されるようです。
では、現在は二つのSSHのコネクションがあるということが分かります。
次のコマンドでSSHのコネクションの数を求めます。
ps -A x | grep &amp;quot;sshd&amp;quot; | grep &amp;quot;\\[priv\\]&amp;quot; | wc -l SSH数を送信 求めたSSHの数がCloudWatchに送信されるようにします。</description></item><item><title>SSMとCloudWatchでログインする時、EC2が自動起動されるように設定</title><link>https://duinaru.github.io/ja/posts/2019-11-18-auto-start-ec2-on-sign-in/</link><pubDate>Mon, 18 Nov 2019 11:53:20 +0000</pubDate><guid>https://duinaru.github.io/ja/posts/2019-11-18-auto-start-ec2-on-sign-in/</guid><description>Cloud9を手動で作ったEC2で使用していまして、自動で作る時に使用できるEC2の自動起動のようにしたいと思いました。
しかし、Cloud9が始まる時にEC2をスタートさせることはできなくてConsoleにSign inする時、起動されるようにしました。
AWS System Manager EC2を起動させるためにSSMを利用します。
そのため、SSMがEC2を管理できるようにセットアップをしなければなりません。
IAM Role 作成 : AmazonSSMManagedInstanceCore EC2をSSMで使用できるようにIAM Roleを作成します。
AmazonSSMManagedInstanceCoreのpolicyを選択し、作ります。
作ったIAMを自動起動させようとするEC2にattachすればいいです。
Attaching an IAM Role to an Instance
上のリンクのようにすればいいです。
IAM Role 作成 : AmazonSSMAutomationRole 今度はSSMを実行する時に必要なIAM Roleを作成します。
AmazonSSMAutomationRoleのpolicyを選択し、作ります。
このroleは後で使います。
次はログインイベントが発生するとEC2が起動されるように設定します。
CloudTrail 設定 ログインイベントを使用するためにはCloudTrailを設定する必要があります。
CloudTrailの左メニューで Trails - Create Trail を選択しましょう。
作成し、設定を見るとLoggingがONになっていることが確認できます。
CloudTrailの設定が終わりました。
CloudWatchのRules設定 ログインイベントをCloudWatchで感知し、処理されるようにしましょう。
CloudWatchの左メニューで Rules - Creates rule を選択します。
Event Source Service NameはAWS Console Sign-inを選択します。</description></item><item><title>Rails画面確認とCloud9設定</title><link>https://duinaru.github.io/ja/posts/2019-11-16-develop-using-cloud9/</link><pubDate>Sat, 16 Nov 2019 11:33:08 +0000</pubDate><guid>https://duinaru.github.io/ja/posts/2019-11-16-develop-using-cloud9/</guid><description>サンプル画面を確認し、本格的な開発にあたってIDEをCloud9で使用する設定をしました。
blog 生成 blogという名前のrailsアプリケーションを作りました。
rails new blog 該当のコマンドで予め用意されているblogアプリケーションがダウンロードされます。
エラー発生 ダウンロードは完了しましたが、エラーが出ました。
Gem::Ext::BuildError: ERROR: Failed to build gem native extension. current directory: /tmp/bundler20191116-12860-iie6sqlite3-1.4.1/gems/sqlite3-1.4.1/ext/sqlite3 /usr/bin/ruby2.5 -r ./siteconf20191116-12860-3nvvhf.rb extconf.rb checking for sqlite3.h... no sqlite3.h is missing. Try 'brew install sqlite3', 'yum install sqlite-devel' or 'apt-get install libsqlite3-dev' and check your shared library search path (the location where your sqlite3 shared library is located). *** extconf.rb failed *** Could not create Makefile due to some reason, probably lack of necessary libraries and/or headers.</description></item><item><title>ruby on railsをec2に実装してみました。</title><link>https://duinaru.github.io/ja/posts/2019-11-14-set-up-ruby-on-rails-ec2/</link><pubDate>Thu, 14 Nov 2019 11:18:53 +0000</pubDate><guid>https://duinaru.github.io/ja/posts/2019-11-14-set-up-ruby-on-rails-ec2/</guid><description>rubyを知りましたので、rubyでウェブサイトを開発したくてruby on railsを始めました。
開発しながらruby on railsを学習する目的で、環境構築から始めました。
EC2 生成 AMI
ubuntu(Ubuntu Server 18.04 LTS (HVM), SSD Volume Type)を選びました。
他の設定はfree-tierができるようにしました。
Security groups
SSHができるように22ポートは可能にし、他はその時に解放します。
インストール SSHで接続し、インストールします。
Ruby on Rails の Getting Started with Rails を元に進めました。
パッケージアップデート sudo apt-get update Ruby インストール sudo apt-get install ruby-full Ruby バージョン確認 ruby -v railsで要求されるruby 2.5.0の以降のバージョンか確認します。
2.5.xですね。
sqlite3 インストール sudo apt-get install sqlite3 sqlite3 バージョン確認 sqlite3 --version rails インストール sudo gem install rails インストールのエラー Could not create Makefile due to some reason, probably lack of necessary libraries and/or headers.</description></item><item><title>ブログにコメント機能を追加しました</title><link>https://duinaru.github.io/ja/posts/2019-11-03-experience-using-comments-with-minimal-mistakes/</link><pubDate>Sun, 03 Nov 2019 11:06:13 +0000</pubDate><guid>https://duinaru.github.io/ja/posts/2019-11-03-experience-using-comments-with-minimal-mistakes/</guid><description>使用しているMinimal Mistakes テーマは多様なコメントサービスを使えるように設定できて、使いました。
コメントを追加するページにcomment: trueを追加し、_config.xmlには使用するサービスの情報を入力すればできます。
筆者はdisqusというコメントサービスを使ってみました。
disqusに会員登録してサイトを生成し、ShortNameを分かればできます。
shortnameはサイトを生成する時や、生成した後に設定ページでも分かります。
site生成
site設定
後は_config.xmlに設定すればできます。
会員登録と使用設定すれば終わるので、簡単ですね。
確認してみましょう。
出ない。
理由を探してみましょう。
おかしいです。どう見ても今までの設定でできそうです。
それで、Minimal Mistakesでdisqusと関係したcommentのソースコードを探してみました。
_includes\comments.html
disqusのためにsectionを作っていることが確認できます。
それで、該当のhtmlをincludeしているファイルを探してみました。
_layouts\single.html
singleのレイアウトページの一部です。
何かの条件でincludeをしていることが確認できます。
site.comments.providerは_config.xmlで設定し、page.commentsはtrueに設定しておきました。
jekyll.environment == &amp;lsquo;production&amp;rsquo;は？
あ、Minimal Mistakes comment設定のNoteがこの内容のようですね！
jekyllをproduction環境でbuildする jekyll build オプションでEnvironmentを設定できます。
コードからはjekyll.environmentで読み取れ、buildの設定に分けて異なる結果物を作ることができるようになります。
Minimal Mistakesはproductionでbuildした場合のみ、commentを使用できるようにしてありますので、buildの時にEnvironmentをproductionに設定しなければなりません。
GitHub Pagesでbuildする場合なら、自動的にproductionに設定されてbuildされますが、筆者はlocalでbuildをしているので設定する必要がありました。
linuxの環境でしたら、Environmentで説明しているようにすればいいですが、windowsなら別です。
cmdの場合
set JEKYLL_ENV=production powershellの場合
$env:JEKYLL_ENV = &amp;#39;production&amp;#39; 上記のコマンドを実行した後にbuildやserveをしたら、productionで作られます。
これで、Minimal Mistakesにコメント機能を追加することができました。</description></item><item><title>GitHub PagesでサポートされないPluginを使う方法</title><link>https://duinaru.github.io/ja/posts/2019-10-26-how-to-make-a-github-pages-work-with-an-unsupported-plugin/</link><pubDate>Sat, 26 Oct 2019 10:45:48 +0000</pubDate><guid>https://duinaru.github.io/ja/posts/2019-10-26-how-to-make-a-github-pages-work-with-an-unsupported-plugin/</guid><description>jekyllを公式的にサポートするGitHub Pagesですが、全てのjekyllのpluginまでサポートすることではありません。
GitHub Pagesはサポートするpluginが制限されています。
これ以外のpluginはGitHub Pagesでjekyllをbuildする時、制限されて適用されません。
では、GitHub Pagesでjekyllを使って、ウェブページサービスを作る時は一部のpluginだけ使用しなければならないでしょうか。
半分は正しく、半分は違います。
なぜか調べるまえにGitHub Pagesがどのようにjekyllを使うか調べましょう。
GitHub Pages with jekyll source
Github Pagesでjekyllを使う簡単な方法です。
公式ヘルプでも説明する方法のように、jekyllのソースをrepositoryに上げておいてGitHub Pagesがjekyllをbuildする方法です。
GitHub Pagesで問題なく使用可能なpluginで制限され、pluginの互換性などの問題についてあまり気を使わなく作ることができるいいところがあります。
GitHub Pages without jekyll source
GitHub Pagesは基本的に静的ウェブページホスティングサービスですので、jekyllのソースではなくウェブファイルだけあってもサービスが可能です。
つまり、何で作ったとしても、サービスに必要なファイルだけあれば問題ないということです。
このようなファイルはjekyllでbuildした時に_siteのディレクトリの中に出来上がるので、このファイルを直接GitHub Pagesのrepositoryに上げても問題なくサービスできます。
GitHub PagesでサポートしないjekyllのPluginで作ったファイルも例外ではありません。
GitHub Pages with an unsupported plugin サポートされないpluginでもローカルでbuildした後、ファイルを上げればサービスが可能になります。
このためには先ずはどのbranchがGitHub Pagesに設定されているか確認する必要があります。
repositoryのsettingsにGitHub Pagesという項目があります。
筆者の場合はmaster branchを使用中ということを確認できました。
ですので、master branchにjekyllでbuildしたファイルを上げておけば、GitHub Pagesをサービスすることができるようになります。
ソースとファイルを分けて、管理
master branchにbuildしたファイルを上げたら、ソースは分けて上げたくなりました。
それでsourcesというbranchを作り、ソースは該当のbranchにpushするとことにしました。
しかし、buildされたファイルはmaster branchにpushしなければならないので、都度branchを変更してpushする面倒なことになりました。
これを全て手作業でしたら、ミスも出るし、面倒なので、下のようなPowerShell Scriptを作って自動化しました。
PowerShell Script
chcp 65001 $env:JEKYLL_ENV = &amp;#39;production&amp;#39; rm -r _site/* git clone -b master https://github.</description></item><item><title>開発と経験があるブログ</title><link>https://duinaru.github.io/ja/posts/2019-10-23-blog-with-development-and-experience/</link><pubDate>Wed, 23 Oct 2019 10:29:05 +0000</pubDate><guid>https://duinaru.github.io/ja/posts/2019-10-23-blog-with-development-and-experience/</guid><description>普段考えていた色々なものを書こうとブログを作ることにしました。
ブログを運営するならブログサービスを利用した方が簡単で便利だろうと思っていた時にgithub.ioというドメインを見つけました。
結果としては、github pagesで実装しました。
必要な物 github
github pagesをサービスするrepositoryを作りました。
jekyll
github pagesはjekyllをサポートします。
jekyllで作ったソースをrepositoryに置いておくだけでビルド-デプロイをしてくれます。
ruby
jekyllで作るにはrubyが必要です。
buildをしたり、pluginをインストールして機能を追加することができます。
作る ruby
jekyllのbuildと様々なpluginを利用するためにインストールしました。
jekyllの公式ホームページに手順があり、便利でした。
マルチランゲージ
少なくとも2ヶ国語で運営することを目指してしていまして、マルチランゲージのサポートのためpolyglot pluginを使用しました。
このプラグインはgithub pagesで公式的にサポートするプラグインではありませんので、単純にrepositoryにソースを置いておくことだけでビルドはできません。
でも、対策はあるでしょう。
テーマ
テーマを選ぶことに時間がかなりかかりました。
これにしようかあれにしようかとしたら時間があっという間に過ぎました。
結局はMinimal Mistakesにすることにしました。
しかし、ここで問題が発生しました。
buildの時、エラーが出ます。
polyglot pluginが動かないです。
問題解決 windows環境でbuildの時、文字関連エラーの解決
rubyをwindowsの環境で使おうとしたら出るエラーでした。
vscodeからcmdでビルドしていたので、chcp 65001 でUTF-8に変えて解決しました。
他には、jekyllをエラーが出ないバージョンに変更する方法もありますが、下記の問題でバージョンを制限するしかありませんでした。
Minimal Mistakesとpolyglot pluginを共に使用
ウェブページを正常に作れない問題が出ました。
これについては色々トライし、次のように解決できました。
jekyllバージョン制限
jekyllのバージョンを3.8.6としたら、polyglot pluginと共に動きました。
polyglot pluginの_config.xml設定
languagesの言語の一番目をdefault_langに設定したらpolyglot pluginがうまく動きました。
機能追加 言語セレクタ
マルチランゲージのサポートのため、言語を変更する機能を追加しました。
ページの下にあるJAやKOなどのものです。
コメント
Minimal Mistakesで提供するdisqusを利用し、実装しました。
感想 多様な機能を実現してかなり時間が過ぎました。
これからはポストも作成しつつ、また新しい機能を追加していきたいと思います。</description></item></channel></rss>