<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on DuiNaru | 개발과 경험을 담는 블로그</title><link>https://duinaru.github.io/posts/</link><description>Recent content in Posts on DuiNaru | 개발과 경험을 담는 블로그</description><generator>Hugo -- gohugo.io</generator><language>ko</language><lastBuildDate>Mon, 17 May 2021 14:52:17 +0000</lastBuildDate><atom:link href="https://duinaru.github.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>AWS summit online japan 2021 2일차 후기</title><link>https://duinaru.github.io/posts/2021-05-17-aws-summit-online-day2/</link><pubDate>Mon, 17 May 2021 14:52:17 +0000</pubDate><guid>https://duinaru.github.io/posts/2021-05-17-aws-summit-online-day2/</guid><description>매년 열리는 AWS summit, 작년부터 COVID-19로 인해 온라인으로 진행되고 있습니다.
올해는 5월 12일 부터 13일까지 양일간에 걸쳐 라이브로 진행되고 31일 까지 개최됩니다.
aws summit online japan
필자는 라이브로 진행되는 양일간에 걸쳐 참가하였으며, 각 내용을 정리해 볼까 합니다.
2일차 2일차에는 개발이나 서버리스 등 실제로 만들어 보는 내용에 관련된 세션 주로 참가하였습니다.
마지막 날 인만큼, 특별강연까지 기나긴 하루였습니다.
기조강연 전날과는 다르게 영어로 대부분이 진행되며, 일본어 자막이 지원되었습니다. AWS의 신념에 대해 말하기 시작해 다양한 서비스를 소개하고 AWS 커스텀 실리콘에 대해 이야기를 하면서 중간중간 관계회사분들의 이야기를 들을 수 있었습니다.</description></item><item><title>AWS summit online japan 2021 1일차 후기</title><link>https://duinaru.github.io/posts/2021-05-16-aws-summit-online-day1/</link><pubDate>Sun, 16 May 2021 07:41:06 +0000</pubDate><guid>https://duinaru.github.io/posts/2021-05-16-aws-summit-online-day1/</guid><description>매년 열리는 AWS summit, 작년부터 COVID-19로 인해 온라인으로 진행되고 있습니다.
올해는 5월 12일 부터 13일까지 양일간에 걸쳐 라이브로 진행되고 31일 까지 개최됩니다.
aws summit online japan
필자는 라이브로 진행되는 양일간에 걸쳐 참가하였으며, 각 내용을 정리해 볼까 합니다.
1일차 전반적으로 데이터베이스와 AI에 대한 이야기를 들을 수 있었습니다.
기조강연 테크놀로지가 바꾸는 일본사회라는 테마로 시작하여, AWS의 성장과 설명, 오사카 리전의 탄생을 말하면서 진화하는 AWS에 대해 발표가 있었습니다.
중간중간 AWS를 이용하는 여러 회사의 관계자 분들의 이야기와 함께, AWS를 이용하여 어떠한 식으로 바뀌었고, 어떠한 것을 바꿀 수 있는지 알 수가 있었습니다.</description></item><item><title>GitHub Universe 2020 후기</title><link>https://duinaru.github.io/posts/2020-12-11-githubuniverse2020/</link><pubDate>Fri, 11 Dec 2020 14:33:03 +0000</pubDate><guid>https://duinaru.github.io/posts/2020-12-11-githubuniverse2020/</guid><description>2020년 12월 9일, 평소와 다를 바 없이 YouTube를 들락거리던 필자는 알 수 없는 YouTube의 알고리즘에 의해 GitHub Universe 2020을 목격합니다.
개발자라면 모를리 없는 GitHub&amp;hellip; 커서가 이끌려 가는건 어찌보면 본능이였다고 생각되네요. (YouTube알고리즘님 감사합니다.)
그곳에는 하나의 URL과 무언가 특이한 영상이 나오고 있었으며, URL을 클릭하였더니 개발자스러운 검은 배경의 홈페이지가 등장합니다.
GitHub Universe 2020
3일간 온라인으로 중계되며, 4개의 각각 다른 테마로 진행하더군요.
Developer, Enterprise, Play 그리고 Univers(ity)
각각의 테마별로 시간대별 세션이 있고, 그 시간에는 해당 주제에 대한 영상을 볼 수 있게 되어있습니다.</description></item><item><title>GitHub Actions으로 GitHub Pages에 배포하기</title><link>https://duinaru.github.io/posts/2020-09-11-deloy-github-pages-with-actions/</link><pubDate>Fri, 11 Sep 2020 13:13:36 +0000</pubDate><guid>https://duinaru.github.io/posts/2020-09-11-deloy-github-pages-with-actions/</guid><description>GitHub Pages도 사용해서 블로그 사이트를 서비스하기로 하였습니다. 이전까지 사용하던 GitHub Pages를 버리기는 아까운 생각이 들더군요.
GitHub Pages는 기본적으로 jekyll 소스를 자동으로 빌드해서 배포하는 서비스 이지만, 정적 웹 페이지를 그대로 서비스하는 것도 가능합니다.
그렇기에, Hugo로 만든 블로그라고 할지라도 GitHub Pages에서 서비스가 가능합니다.
빌드 결과물을 배포하면 되는 단순한 작업이라서 GitHub Actions로 자동으로 하도록 하였습니다. 이 글에서는 그 방법을 적어보려고 합니다.
GitHub Actions이란? Automate your workflow from idea to production
GitHub Actions makes it easy to automate all your software workflows, now with world-class CI/CD.</description></item><item><title>Netlify CMS + Netlify 로 블로그 사이트 관리 및 배포 자동화 하기</title><link>https://duinaru.github.io/posts/2020-09-02-make-blog-with-netlifycms-netlify/</link><pubDate>Wed, 02 Sep 2020 11:58:25 +0000</pubDate><guid>https://duinaru.github.io/posts/2020-09-02-make-blog-with-netlifycms-netlify/</guid><description>정적 사이트 생성기로 만든 블로그는 markdown형식의 파일로 글을 관리하고 매번 빌드해서 배포 해주어야 하죠. 이를 쉽게 하기위해 Netlify CMS 와 Netlify 를 넣어보았습니다.
Netlify CMS Netlify CMS, Forestry.io와 같이 정적 사이트의 cms는 여러 가지가 있죠.
Frontend Interfaces with Hugo
어떤 서비스라도 관리를 쉽게 해주지만, Netlify 랑 같이 쓰면 좋을 거 같은 Netlify CMS를 적용해 보았습니다.
특징 netlify cms - overview
웹 베이스, 많은 정적 사이트 생성기와 같이 사용할 수 있는 등의 좋은 특징이 많습니다.</description></item><item><title>Hugo로 블로그 만들기</title><link>https://duinaru.github.io/posts/2020-08-23-blog-with-hugo/</link><pubDate>Sun, 23 Aug 2020 07:08:08 +0000</pubDate><guid>https://duinaru.github.io/posts/2020-08-23-blog-with-hugo/</guid><description>Hugo를 사용하여 블로그를 만들어 보았습니다. Hugo를 설치하고 테마를 적용하는 것만으로도 바로 만들 수 있습니다.
Hugo 설치 우선 Hugo를 설치해 주어야 합니다.
Install Hugo
Hugo는 기본 버전과 extended버전이 있습니다. extended버전은 SCSS/SASS를 지원하는 버전으로, SCSS/SASS를 사용하고자 하실 분은 extended버전으로 설치해야 한다고 하네요.
And Now: Hugo Pipes!
Hugo is now released with two binary version: One with and one without SCSS/SASS support. At the time of writing, this is only available in the binaries on the GitHub release page.</description></item><item><title>블로그를 리뉴얼 하였습니다</title><link>https://duinaru.github.io/posts/2020-08-22-blog-renewal/</link><pubDate>Sat, 22 Aug 2020 11:44:26 +0000</pubDate><guid>https://duinaru.github.io/posts/2020-08-22-blog-renewal/</guid><description>기존에는 Jekyll로 만들어서 Github Pages에 배포하였지만, Jekyll의 다국어 지원이 불편해서 고민하던 중에 Hugo 로 바꾸어 쓰기로 하였습니다. 그러면서 Netlify + Netlify CMS 을 넣어보기로 하고요.
이 글에서는 리뉴얼 후기 및 과정에 대해 적어볼까 합니다.
Hugo Hugo는 go 언어로 작성된 정적 사이트 생성기 입니다. 일반적인 동적 사이트 처럼 서버에서 웹 페이지를 만들어서 보여주는 것과 다르게 단순히 만들어져 있는 웹 페이지를 보여주게 되죠. 서버 자원을 절약할 수 있다는 점이 매력적인 부분입니다.
Jekyll 역시 정적 사이트 생성기 이지만, 비교적 최신이기도 하고 다국어 지원에서의 편리함도 있어서 바꾸기로 하였습니다.</description></item><item><title>CloudWatch를 이용하여 일정 시간 동안 SSH 연결이 없을 때, EC2 자동 종료 시키기</title><link>https://duinaru.github.io/posts/2019-12-01-stop-ec2-when-no-ssh-connection-for-a-while/</link><pubDate>Sun, 01 Dec 2019 12:08:35 +0000</pubDate><guid>https://duinaru.github.io/posts/2019-12-01-stop-ec2-when-no-ssh-connection-for-a-while/</guid><description>주로 Cloud9로 사용하는 EC2가 SSH 연결이 없을 때는 사용할 일이 없어서, 일정 시간 대기 한 뒤에 자동 종료가 되도록 만들어 보았습니다.
EC2에서 실행되는 스크립트 만으로도 가능할 듯 하지만, AWS에서 SSH의 연결 수도 모니터링할 수 있게 하도록 CloudWatch를 이용하였습니다.
IAM User 작성 CloudWatch로 SSH의 연결 수를 보내는 역할을 하는 User가 필요합니다.
aws cli에서 접속이 가능하고 권한은 CloudWatchAgentServerPolicy을 가진 User를 생성하였습니다.
EC2에 aws cli 설정 CloudWatch로 SSH의 연결 수를 보내기 위해서 EC2에 aws cli를 설치하고, 위에서 만든 User를 설정해줍니다.</description></item><item><title>SSM와 CloudWatch로 로그인할 때, EC2가 자동 시작되게 하기</title><link>https://duinaru.github.io/posts/2019-11-18-auto-start-ec2-on-sign-in/</link><pubDate>Mon, 18 Nov 2019 11:59:58 +0000</pubDate><guid>https://duinaru.github.io/posts/2019-11-18-auto-start-ec2-on-sign-in/</guid><description>Cloud9를 수동으로 만든 EC2로 사용하다보니, 자동으로 만들 때 사용할 수 있는 EC2의 자동 시작-종료 기능을 사용할 수 없어서, 만들어 보기로 했습니다.
다만, Cloud9이 시작할 때 EC2를 시작 시킬 수 없어서 Console에 Sign in 할 때, 시작 되도록 만들었습니다.
AWS System Manager EC2를 실행시키기 위해 SSM을 사용할 생각입니다.
그러기 위해서는 SSM가 EC2를 관리 할 수 있도록 설정을 해야 합니다.
IAM의 Role 생성 : AmazonSSMManagedInstanceCore EC2를 SSM에서 사용하기 위해서 IAM role을 설정해야 합니다.</description></item><item><title>Rails 화면 띄우기 및 Cloud9 사용</title><link>https://duinaru.github.io/posts/2019-11-16-develop-using-cloud9/</link><pubDate>Sat, 16 Nov 2019 11:42:23 +0000</pubDate><guid>https://duinaru.github.io/posts/2019-11-16-develop-using-cloud9/</guid><description>샘플 화면 하나를 띄우고, 본격적인 개발에 앞서 IDE를 사용하기로 하였습니다.
blog 생성 blog라는 이름의 rails 어플을 생성하였습니다.
rails new blog 해당 명령어로 미리 설정되어 있는 blog 어플리케이션을 가져와서 다운로드한다네요.
에러 발생 설치는 되었는데, 중간에 에러가 나왔네요. 역시 한번에 되는건 없나봅니다.
Gem::Ext::BuildError: ERROR: Failed to build gem native extension. current directory: /tmp/bundler20191116-12860-iie6sqlite3-1.4.1/gems/sqlite3-1.4.1/ext/sqlite3 /usr/bin/ruby2.5 -r ./siteconf20191116-12860-3nvvhf.rb extconf.rb checking for sqlite3.h... no sqlite3.h is missing. Try 'brew install sqlite3', 'yum install sqlite-devel' or 'apt-get install libsqlite3-dev' and check your shared library search path (the location where your sqlite3 shared library is located).</description></item><item><title>ruby on rails를 ec2에 구축해보았습니다</title><link>https://duinaru.github.io/posts/2019-11-14-set-up-ruby-on-rails-ec2/</link><pubDate>Thu, 14 Nov 2019 11:29:08 +0000</pubDate><guid>https://duinaru.github.io/posts/2019-11-14-set-up-ruby-on-rails-ec2/</guid><description>ruby를 알게 되었으니 ruby를 이용한 웹 사이트 한번 만들어보고싶어서 ruby on rails로 개발을 시작하였습니다.
개발을 하면서 동시에 ruby on rails를 익히려는 목적이므로 기본적인 환경 구축부터 시작하였습니다.
EC2 생성 AMI
편하게 ubuntu(Ubuntu Server 18.04 LTS (HVM), SSD Volume Type)를 선택하였습니다.
나머지 설정은 free-tier 가능한 설정으로 생성했습니다.
Security groups
SSH 접속 가능하게 22포트는 열어두고, 나머지는 나중에 설정하면서 열어주었습니다.
클릭 몇 번에 생성이 끝났습니다. 고마워요. AWS
설치 SSH로 접속해서, 차근차근 설치를 진행합니다.
Ruby on Rails 의 Getting Started with Rails 를 바탕으로 진행하였습니다.</description></item><item><title>Blog에 댓글 기능을 추가하였습니다</title><link>https://duinaru.github.io/posts/2019-11-03-experience-using-comments-with-minimal-mistakes/</link><pubDate>Sun, 03 Nov 2019 11:12:30 +0000</pubDate><guid>https://duinaru.github.io/posts/2019-11-03-experience-using-comments-with-minimal-mistakes/</guid><description>사용하고 있는 Minimal Mistakes 테마는 여러 댓글 서비스를 사용할 수 있게 설정 할 수 있어서, 사용해보았습니다.
댓글을 사용할 페이지에 comment: true를 추가하고, _config.xml에 사용할 서비스와 정보를 입력하기만 하면 됩니다.
이번에는 disqus라는 댓글 서비스를 사용해 보았습니다.
disqus에 가입한 뒤에 사이트를 생성해주고, ShortName을 알면 됩니다.
shortname은 사이트를 생성할 때, 또는 생성하고 설정 화면에서도 알 수 있습니다.
site생성
site설정
그런다음에, _config.xml 에 설정하면 됩니다.
가입하고 테마에 사용 설정만 하면 되니 간단하네요.</description></item><item><title>GitHub Pages에서 지원하지 않는 플러그인 쓰기</title><link>https://duinaru.github.io/posts/2019-10-26-how-to-make-a-github-pages-work-with-an-unsupported-plugin/</link><pubDate>Sat, 26 Oct 2019 10:58:53 +0000</pubDate><guid>https://duinaru.github.io/posts/2019-10-26-how-to-make-a-github-pages-work-with-an-unsupported-plugin/</guid><description>jekyll을 공식적으로 지원하는 GitHub Pages이지만, 모든 jekyll의 플러그인까지 지원하는 것은 아닙니다.
GitHub Pages는 지원하는 플러그인이 제한 되어있습니다.
이 이외의 플러그인은 GitHub Pages에서 jekyll을 build할때, 제한되어 적용되지 않습니다.
그럼, GitHub Pages에서 jekyll로 웹 페이지 서비스를 만들 때는 일부 플러그인만 사용해야 하는 것 일까요?
반은 맞고 반은 틀립니다.
알아보기 전에, 먼저 어떻게 GitHub Pages가 jekyll를 쓰는지 살펴봅시다.
GitHub Pages with jekyll source
GitHub Pages에서 jekyll을 쓰는 간단한 방법입니다.
공식 도움말에서도 설명하는 방법처럼 jekyll 소스를 repository에 올려두고 GitHub Pages가 jekyll을 build를 하는 방법입니다.</description></item><item><title>개발과 경험이 함께 하는 블로그</title><link>https://duinaru.github.io/posts/2019-10-23-blog-with-development-and-experience/</link><pubDate>Wed, 23 Oct 2019 10:34:49 +0000</pubDate><guid>https://duinaru.github.io/posts/2019-10-23-blog-with-development-and-experience/</guid><description>평소에 생각하던 이것저것을 적어볼까 하다가 블로그를 만들게 되었습니다.
블로그를 운영한다면 블로그 서비스를 이용하는 편이 간단하고 편할 듯 했지만, github.io 라는 도메인이 눈에 들어오더군요.
그래서 github pages로 만들게 되었습니다.
준비물 github
github pages를 서비스할 repository를 만들었습니다.
jekyll
github pages는 jekyll을 지원합니다.
jekyll로 만든 소스를 repository에 올려 두는 것 만으로도 빌드-배포를 해주죠.
ruby
jekyll로 만들려면 ruby가 필요합니다.
build를 하거나, plugin을 설치해서 기능을 추가해볼 수 있습니다.
만들기 ruby
jekyll의 build와 여러 plugin을 설치하기 위해 설치해주었습니다.</description></item></channel></rss>